{
  "address": "0x9EE10f63449f2DD3CeE511CcCf67C881F73D3fb6",
  "abi": [],
  "transactionHash": "0x78e12c856736846d26a20d2c90fcf69b3a1a400faf83dc6c648c06dbd390026b",
  "receipt": {
    "to": null,
    "from": "0xEE6Eacc608A4524DF5Cb1a33CE7840139a8deA1A",
    "contractAddress": "0x9EE10f63449f2DD3CeE511CcCf67C881F73D3fb6",
    "transactionIndex": 259,
    "gasUsed": "1279572",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9455f38252ee03ec9ba433868af851f3d7c0751962918ddea0dcfa74d58fe4f4",
    "transactionHash": "0x78e12c856736846d26a20d2c90fcf69b3a1a400faf83dc6c648c06dbd390026b",
    "logs": [],
    "blockNumber": 33535092,
    "cumulativeGasUsed": "48866756",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0344a85c33fd92a16cc5e33d3565410e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logic/ERC4626Logic.sol\":\"ERC4626Logic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x31fc44a7323dee20310373aa7fe1fa9e0b302329b79ee5bbad859a9eac40b029\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IDepositLimitModule {\\n    function availableDepositLimit(\\n        address receiver\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa73fdcc52d8746a357d4a2fcbe81473c06fb252d4bc702e1d9aaa5397230a3c7\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IStrategy {\\n    function asset() external view returns (address);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256);\\n    function maxRedeem(address owner) external view returns (uint256);\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x47f3815b16a5eada1aecbae69d4a97453f26960f62780d71e92106772eb4a869\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n    // Enums\\n    enum StrategyChangeType {\\n        ADDED,\\n        REVOKED\\n    }\\n\\n    event Deposited(address indexed user, uint256 amount, uint256 shares);\\n    event RequestedWithdraw(address indexed user, uint256 shares);\\n    event Withdrawn(\\n        address indexed user,\\n        uint256 shares,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n    event TreasuryTransferred();\\n    event RateUpdated(uint256 oldRate, uint256 newRate);\\n    event GovernmentChanged(address newGovernment);\\n    event FeeUpdated(uint256 oldFee, uint256 newFee);\\n    event StrategyChanged(\\n        address indexed strategy,\\n        StrategyChangeType changeType\\n    );\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 currentDebt,\\n        uint256 performanceFee,\\n        uint256 refund\\n    );\\n    event DebtUpdated(\\n        address indexed strategy,\\n        uint256 currentDebt,\\n        uint256 newDebt\\n    );\\n    event UpdateAccountant(address indexed accountant);\\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\\n    event UpdateDefaultQueue(address[] newDefaultQueue);\\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\\n    event UpdateAutoAllocate(bool autoAllocate);\\n    event UpdateDepositLimit(uint256 depositLimit);\\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\\n    event UpdateManagementFee(uint256 managementFee);\\n    event UpdateFeeRecipient(address feeRecipient);\\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\n    event ManagementFeeMinted(address indexed feeRecipient, uint256 amount);\\n\\n    function mint(address receiver, uint256 assets) external;\\n\\n    function burn(address receiver, uint256 assets) external;\\n\\n    function spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) external;\\n\\n    function asset() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256);\\n    function withdraw(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function maxWithdraw(address owner) external view returns (uint256);\\n    function maxWithdraw(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x93c93c8afea2bf535f5d5610b21fb2ed9608d5cc62e60dba949fee73cf880f3b\",\"license\":\"MIT\"},\"contracts/interfaces/IWithdrawLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IWithdrawLimitModule {\\n    function availableWithdrawLimit(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] calldata strategies\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8eea5e8a25c61d046e8e244cf6e0652efd080cdab8ef757f9bb0904d66dbdcfd\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Constants {\\n    uint256 public constant MAX_QUEUE = 20;\\n    string public constant API_VERSION = \\\"0.0.1\\\";\\n    uint256 public constant MAX_PROFIT_UNLOCK_TIME = 365 days;\\n    uint256 public constant MAX_BPS = 10_000;\\n    uint256 public constant MAX_BPS_EXTENDED = 1_000_000_000_000;\\n\\n    uint256 public constant YEAR = 365 * 24 * 60 * 60;\\n\\n    bytes32 public constant ROLE_GOVERNANCE_MANAGER =\\n        keccak256(\\\"ROLE_GOVERNANCE_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_ADD_STRATEGY_MANAGER =\\n        keccak256(\\\"ROLE_ADD_STRATEGY_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_REVOKE_STRATEGY_MANAGER =\\n        keccak256(\\\"ROLE_REVOKE_STRATEGY_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_ACCOUNTANT_MANAGER =\\n        keccak256(\\\"ROLE_ACCOUNTANT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_QUEUE_MANAGER =\\n        keccak256(\\\"ROLE_ACCOUNTANT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_REPORTING_MANAGER =\\n        keccak256(\\\"ROLE_REPORTING_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_DEBT_MANAGER = keccak256(\\\"ROLE_DEBT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_MAX_DEBT_MANAGER =\\n        keccak256(\\\"ROLE_MAX_DEBT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_DEPOSIT_LIMIT_MANAGER =\\n        keccak256(\\\"ROLE_DEPOSIT_LIMIT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_WITHDRAW_LIMIT_MANAGER =\\n        keccak256(\\\"ROLE_WITHDRAW_LIMIT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_MINIMUM_IDLE_MANAGER =\\n        keccak256(\\\"ROLE_MINIMUM_IDLE_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_PROFIT_UNLOCK_MANAGER =\\n        keccak256(\\\"ROLE_PROFIT_UNLOCK_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_DEBT_PURCHASER =\\n        keccak256(\\\"ROLE_DEBT_PURCHASER\\\");\\n\\n    bytes32 public constant ROLE_EMERGENCY_MANAGER =\\n        keccak256(\\\"ROLE_EMERGENCY_MANAGER\\\");\\n}\\n\",\"keccak256\":\"0xe2e78b755f8bcb6fcc614ff951d2e2ae9b62f163ab283b410c5264f51a505017\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/ERC20Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nlibrary ERC20Logic {\\n    function asset(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (address) {\\n        return IVault(vaultData.addressVault).asset();\\n    }\\n\\n    function decimals(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (uint8) {\\n        return IVault(vaultData.addressVault).decimals();\\n    }\\n\\n    function totalAssets(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (uint256) {\\n        return IVault(vaultData.addressVault).totalAssets();\\n    }\\n\\n    function totalSupply(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (uint256) {\\n        return IVault(vaultData.addressVault).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        DataTypes.VaultData storage vaultData,\\n        address owner\\n    ) internal view returns (uint256) {\\n        return IERC20(vaultData.addressVault).balanceOf(owner);\\n    }\\n\\n    function _spendAllowance(\\n        DataTypes.VaultData storage vaultData,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        return\\n            IVault(vaultData.addressVault).spendAllowance(\\n                owner,\\n                spender,\\n                value\\n            );\\n    }\\n\\n    function _mint(\\n        DataTypes.VaultData storage vaultData,\\n        address receiver,\\n        uint256 assets\\n    ) internal {\\n        IVault(vaultData.addressVault).mint(receiver, assets);\\n    }\\n\\n    function _burn(\\n        DataTypes.VaultData storage vaultData,\\n        address receiver,\\n        uint256 assets\\n    ) internal {\\n        IVault(vaultData.addressVault).burn(receiver, assets);\\n    }\\n}\\n\",\"keccak256\":\"0x7683c382a2689f6a97dce3546bd8d5bf50409193e7ba54ff4b34cc1a962e063b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/ERC4626Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\nimport {IStrategy} from \\\"../../../interfaces/IStrategy.sol\\\";\\nimport {IDepositLimitModule} from \\\"../../../interfaces/IDepositLimitModule.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {ManagementFeeLogic} from \\\"./internal/ManagementFeeLogic.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\nimport {UnrealisedLossesLogic} from \\\"./internal/UnrealisedLossesLogic.sol\\\";\\nimport {IWithdrawLimitModule} from \\\"../../../interfaces/IWithdrawLimitModule.sol\\\";\\n\\nlibrary ERC4626Logic {\\n    using Math for uint256;\\n    using ERC20Logic for DataTypes.VaultData;\\n    using ERC4626Logic for DataTypes.VaultData;\\n\\n    function maxDeposit(\\n        DataTypes.VaultData storage vault,\\n        address receiver\\n    ) internal view returns (uint256) {\\n        if (receiver == address(0) || receiver == address(this)) return 0;\\n        if (vault.depositLimitModule != address(0)) {\\n            return\\n                IDepositLimitModule(vault.depositLimitModule)\\n                    .availableDepositLimit(receiver);\\n        }\\n        if (vault.depositLimit == type(uint256).max) return vault.depositLimit;\\n        uint256 totalAssets_ = vault.totalAssets();\\n        if (totalAssets_ >= vault.depositLimit) return 0;\\n        return vault.depositLimit - totalAssets_;\\n    }\\n\\n    function maxMint(\\n        DataTypes.VaultData storage vault,\\n        address receiver\\n    ) external view returns (uint256) {\\n        uint256 maxDepositAmount = vault.maxDeposit(receiver);\\n        return vault._convertToAssets(maxDepositAmount, Math.Rounding.Floor);\\n    }\\n\\n    function maxWithdraw(\\n        DataTypes.VaultData storage vault,\\n        address owner\\n    ) external view returns (uint256) {\\n        return vault._maxWithdraw(owner, 0, new address[](0));\\n    }\\n\\n    function maxWithdraw(\\n        DataTypes.VaultData storage vault,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory strategies\\n    ) external view returns (uint256) {\\n        return vault._maxWithdraw(owner, maxLoss, strategies);\\n    }\\n\\n    function maxRedeem(\\n        DataTypes.VaultData storage vault,\\n        address owner\\n    ) external view returns (uint256) {\\n        uint256 maxWithdrawAmount = vault._maxWithdraw(\\n            owner,\\n            0,\\n            new address[](0)\\n        );\\n        return vault._convertToShares(maxWithdrawAmount, Math.Rounding.Floor);\\n    }\\n\\n    function _maxWithdraw(\\n        DataTypes.VaultData storage vault,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) internal view returns (uint256) {\\n        require(maxLoss <= Constants.MAX_BPS, \\\"Invalid max loss\\\");\\n        uint256 maxAssets = vault._convertToAssets(\\n            vault.balanceOf(owner),\\n            Math.Rounding.Floor\\n        );\\n\\n        if (vault.withdrawLimitModule != address(0)) {\\n            return\\n                Math.min(\\n                    IWithdrawLimitModule(vault.withdrawLimitModule)\\n                        .availableWithdrawLimit(owner, maxLoss, _strategies),\\n                    maxAssets\\n                );\\n        }\\n\\n        if (maxAssets <= vault.totalIdle) return maxAssets;\\n        uint256 have = vault.totalIdle;\\n        uint256 loss = 0;\\n        address[] memory queue = vault.useDefaultQueue ||\\n            _strategies.length == 0\\n            ? vault.defaultQueue\\n            : _strategies;\\n\\n        for (uint256 i = 0; i < queue.length; i++) {\\n            address strategy = queue[i];\\n            require(\\n                vault.strategies[strategy].activation != 0,\\n                \\\"Inactive strategy\\\"\\n            );\\n\\n            uint256 currentDebt = vault.strategies[strategy].currentDebt;\\n\\n            uint256 toWithdraw = Math.min(maxAssets - have, currentDebt);\\n            if (toWithdraw == 0) continue;\\n\\n            uint256 unrealisedLoss = UnrealisedLossesLogic\\n                ._assessShareOfUnrealisedLosses(\\n                    strategy,\\n                    currentDebt,\\n                    toWithdraw\\n                );\\n\\n            uint256 strategyLimit = IStrategy(strategy).convertToAssets(\\n                IStrategy(strategy).maxRedeem(address(this))\\n            );\\n\\n            if (strategyLimit < toWithdraw - unrealisedLoss) {\\n                if (unrealisedLoss != 0) {\\n                    unrealisedLoss =\\n                        (unrealisedLoss * strategyLimit) /\\n                        (toWithdraw - unrealisedLoss);\\n                }\\n\\n                toWithdraw = strategyLimit + unrealisedLoss;\\n            }\\n\\n            if (unrealisedLoss > 0 && maxLoss < Constants.MAX_BPS) {\\n                if (\\n                    loss + unrealisedLoss >\\n                    ((have + toWithdraw) * maxLoss) / Constants.MAX_BPS\\n                ) break;\\n            }\\n            have += toWithdraw;\\n            loss += unrealisedLoss;\\n            if (have >= maxAssets) break;\\n        }\\n        return have;\\n    }\\n\\n    function previewDeposit(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return _convertToSharesWithFee(vault, assets, Math.Rounding.Floor);\\n    }\\n\\n    function previewMint(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return _convertToAssetsWithFee(vault, shares, Math.Rounding.Ceil);\\n    }\\n\\n    function previewWithdraw(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return _convertToSharesWithFee(vault, assets, Math.Rounding.Ceil);\\n    }\\n\\n    function previewRedeem(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return _convertToAssetsWithFee(vault, shares, Math.Rounding.Floor);\\n    }\\n\\n    function convertToAssets(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return vault._convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    function convertToAssets(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToAssets(shares, rounding);\\n    }\\n\\n    function convertToAssetsWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return vault._convertToAssetsWithFee(shares, Math.Rounding.Floor);\\n    }\\n\\n    function convertToAssetsWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToAssetsWithFee(shares, rounding);\\n    }\\n\\n    function convertToShares(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return vault._convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    function convertToShares(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToShares(assets, rounding);\\n    }\\n\\n    function convertToSharesWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return vault._convertToSharesWithFee(assets, Math.Rounding.Floor);\\n    }\\n\\n    function convertToSharesWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToSharesWithFee(assets, rounding);\\n    }\\n\\n    function _convertToAssets(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (shares == type(uint256).max || shares == 0) {\\n            return shares;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return shares;\\n        }\\n        uint256 numerator = shares * totalAssets;\\n        uint256 amount = numerator / totalSupply;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalSupply != 0) {\\n            amount++;\\n        }\\n        return amount;\\n    }\\n\\n    function _convertToAssetsWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (shares == type(uint256).max || shares == 0) {\\n            return shares;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupplyWithFee();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return shares;\\n        }\\n        uint256 numerator = shares * totalAssets;\\n        uint256 amount = numerator / totalSupply;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalSupply != 0) {\\n            amount++;\\n        }\\n        return amount;\\n    }\\n\\n    function _convertToSharesWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (assets == type(uint256).max || assets == 0) {\\n            return assets;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupplyWithFee();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return assets;\\n        }\\n        uint256 numerator = assets * totalSupply;\\n        uint256 shares = numerator / totalAssets;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalAssets != 0) {\\n            shares++;\\n        }\\n        return shares;\\n    }\\n\\n    function _convertToShares(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (assets == type(uint256).max || assets == 0) {\\n            return assets;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return assets;\\n        }\\n        uint256 numerator = assets * totalSupply;\\n        uint256 shares = numerator / totalAssets;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalAssets != 0) {\\n            shares++;\\n        }\\n        return shares;\\n    }\\n\\n    function pricePerShare(\\n        DataTypes.VaultData storage vault\\n    ) external view returns (uint256) {\\n        return\\n            vault._convertToAssets(10 ** vault.decimals(), Math.Rounding.Floor);\\n    }\\n\\n    function pricePerShareWithFee(\\n        DataTypes.VaultData storage vault\\n    ) external view returns (uint256) {\\n        return\\n            vault._convertToAssetsWithFee(\\n                10 ** vault.decimals(),\\n                Math.Rounding.Floor\\n            );\\n    }\\n\\n    function totalSupplyWithFee(\\n        DataTypes.VaultData storage vault\\n    ) internal view returns (uint256) {\\n        return\\n            vault.totalSupply() +\\n            ManagementFeeLogic.viewCalculateManagementFee(vault);\\n    }\\n}\\n\",\"keccak256\":\"0x07723061ddec99cf4c9ef2eca7245d6d5839eaa583ffff78c6a4cd63f4bac1be\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/internal/ManagementFeeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DataTypes} from \\\"../../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../../Constants.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IStrategy} from \\\"../../../../interfaces/IStrategy.sol\\\";\\n\\nimport {ERC20Logic} from \\\"../ERC20Logic.sol\\\";\\nimport {IVault} from \\\"../../../../interfaces/IVault.sol\\\";\\n\\nlibrary ManagementFeeLogic {\\n    using ERC20Logic for DataTypes.VaultData;\\n\\n    function caculateManagementFee(\\n        DataTypes.VaultData storage vault\\n    ) internal returns (uint256 feeShares) {\\n        feeShares = _calculateManagementFee(vault);\\n        if (vault.feeRecipient != address(0) && feeShares > 0) {\\n            vault._mint(vault.feeRecipient, feeShares);\\n        }\\n        vault.lastTimeTakeManagementFee = block.timestamp;\\n        emit IVault.ManagementFeeMinted(vault.feeRecipient, feeShares);\\n    }\\n\\n    function viewCalculateManagementFee(\\n        DataTypes.VaultData storage vault\\n    ) internal view returns (uint256) {\\n        return _calculateManagementFee(vault);\\n    }\\n\\n    function _calculateManagementFee(\\n        DataTypes.VaultData storage vault\\n    ) internal view returns (uint256 feeShares) {\\n        if (vault.feeRecipient == address(0)) return 0;\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 totalUserSupply = totalSupply -\\n            vault.balanceOf(vault.addressVault);\\n        feeShares =\\n            (totalUserSupply *\\n                (block.timestamp - vault.lastTimeTakeManagementFee) *\\n                vault.managementFee) /\\n            (Constants.YEAR * Constants.MAX_BPS);\\n    }\\n}\\n\",\"keccak256\":\"0xcf3504cb7a0bc2d012e4194686f1fc20216289d749c59f4b707d660fa11d5442\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/internal/UnrealisedLossesLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IStrategy} from \\\"../../../../interfaces/IStrategy.sol\\\";\\n\\nlibrary UnrealisedLossesLogic {\\n    function _assessShareOfUnrealisedLosses(\\n        address strategy,\\n        uint256 strategyCurrentDebt,\\n        uint256 assetsNeeded\\n    ) internal view returns (uint256) {\\n        uint256 vaultShares = IStrategy(strategy).balanceOf(address(this));\\n        uint256 strategyAssets = IStrategy(strategy).convertToAssets(\\n            vaultShares\\n        );\\n        if (strategyAssets >= strategyCurrentDebt || strategyCurrentDebt == 0)\\n            return 0;\\n\\n        uint256 numerator = assetsNeeded * strategyAssets;\\n        uint256 usersShareOfLoss = assetsNeeded -\\n            (numerator / strategyCurrentDebt);\\n        if (numerator % strategyCurrentDebt != 0) usersShareOfLoss += 1;\\n        return usersShareOfLoss;\\n    }\\n}\\n\",\"keccak256\":\"0x0ceacdb012d4eb19ed7db33ef2594b0343fae7c5c1d9e001187f8b7f6758b6e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary DataTypes {\\n    struct StrategyData {\\n        uint256 activation;\\n        uint256 lastReport;\\n        uint256 currentDebt;\\n        uint256 maxDebt;\\n    }\\n\\n    struct VaultData {\\n        address addressVault;\\n        uint256 totalDebt;\\n        uint256 totalIdle;\\n        // strategy\\n        mapping(address => StrategyData) strategies;\\n        address[] defaultQueue;\\n        bool useDefaultQueue;\\n        bool autoAllocate;\\n        // limit\\n        uint256 minimumTotalIdle;\\n        uint256 depositLimit;\\n        // profit unlocking\\n        uint256 profitMaxUnlockTime;\\n        uint256 fullProfitUnlockDate;\\n        uint256 profitUnlockingRate;\\n        uint256 lastProfitUpdate;\\n        // modules\\n        address accountant;\\n        address depositLimitModule;\\n        address withdrawLimitModule;\\n        // management fee\\n        address feeRecipient;\\n        uint256 managementFee;\\n        uint256 lastTimeTakeManagementFee;\\n    }\\n}\\n\",\"keccak256\":\"0x7d5bfe22b462e0690f2ba51aef13002fcf5b837e7a27a43bcfc44a2c42cd9403\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a576116299081610020823930815050f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80630d25bbb51461032857806310968a051461031957806310e005b1146102f157806313567f29146102e2578063233d87e7146102245780634b2ec7c9146101ea5780635a7d5142146101d5578063612126c81461017f57806368274922146101c05780637ce1f8741461019957806389f28678146101215780638a22c543146101845780639eea8ab81461017f578063a72a276914610150578063b3fc5db91461013b578063c35e0c6614610126578063ccb92db6146101215763cffbf4ac146100e757600080fd5b8160031936011261011d5760209261011691610101610358565b9084519261010e8461036e565b835235610b48565b9051908152f35b8280fd5b6103fb565b6020836101166101353661033d565b90611288565b60208361011661014a366103c2565b9161060e565b50918160031936011261017c575061011660209235610176610170610358565b82611311565b906105ea565b80fd5b6103e5565b602083610116610193366103c2565b91610559565b5091602036600319011261017c5750610116602092356101766101bb82610633565b61040f565b6020836101166101cf366103c2565b916106e6565b6020836101166101e4366103c2565b916112ea565b508160031936011261011d5760209261021e61011692359161020a610358565b8551916102168361036e565b82528361073b565b906106ae565b50608036600319011261011d57610239610358565b67ffffffffffffffff936064358581116102cb57366023820112156102cb57808401359586116102cf578560051b60209286519761027a602084018a6103a0565b885260246020890192840101923684116102cb57602401915b8383106102ac576020886101168b6044358a8c35610e6f565b82356001600160a01b038116810361011d578152918401918401610293565b5080fd5b634e487b7160e01b825260418452602482fd5b60208361011661021e3661033d565b5091602036600319011261017c5750610116602092356103136101bb82610633565b90610502565b6020836101166101763661033d565b6020836101166103373661033d565b90610482565b6040906003190112610353576004359060243590565b600080fd5b602435906001600160a01b038216820361035357565b6020810190811067ffffffffffffffff82111761038a57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761038a57604052565b606090600319011261035357600435906024359060443560048110156103535790565b60206103f36103133661033d565b604051908152f35b60206103f36104093661033d565b906112c3565b60ff16604d811161042057600a0a90565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561042057565b8115610453570490565b634e487b7160e01b600052601260045260246000fd5b8115610453570690565b60001981146104205760010190565b90600019811480156104fa575b6104f5576104b76104b16104a28461140f565b6104ab85611594565b9061072e565b926113da565b9082156104ef576104dc916104cb91610436565b916104d68184610449565b92610469565b6104e35790565b6104ec90610473565b90565b91505090565b905090565b50801561048f565b60001982148015610551575b61054d5761053061052a6105218361140f565b6104ab84611594565b916113da565b811561054857610543906104ec93610436565b610449565b505090565b5090565b50811561050e565b90600019811480156105e2575b6104ef576105796104b16104a28461140f565b9082156105db579061058a91610436565b906105958183610449565b9260048110156105c55760011491826105b2575b50506104e35790565b6105bc9250610469565b151538806105a9565b634e487b7160e01b600052602160045260246000fd5b9250505090565b508015610566565b60001982148015610606575b61054d5761053061052a8261140f565b5081156105f6565b906000198114801561062b575b6104ef576105796104b18361140f565b50801561061b565b5460405163313ce56760e01b815290602090829060049082906001600160a01b03165afa9081156106a257600091610669575090565b6020813d60201161069a575b81610682602093836103a0565b810103126102cb57519060ff8216820361017c575090565b3d9150610675565b6040513d6000823e3d90fd5b600019821480156106de575b61054d576106ca61052a8261140f565b90801561054857610543906104ec93610436565b5081156106ba565b60001982148015610719575b6107135761070261052a8261140f565b9181156105db579061058a91610436565b50905090565b5081156106f2565b9190820391821161042057565b9190820180921161042057565b61074e6107488383611445565b826105ea565b600e8201546001600160a01b039391929190841680610a7857505060028082015480841115610a6f5760009460059660ff6005860154168015610a66575b15610a5d57506004840160405180828193548084526020809401918b5260208b20938b905b828210610a41575050506107c7925003826103a0565b969591955b82965b8851881015610a3557602083818a851b8c01015116916003880191836000528281526040928360002054156109fd578460005281528783600020015492610816838c610721565b84808210911802938481189481146109ed57846108339187611483565b94815191636c82bbbf60e11b8352600493308585015260249381818681875afa9081156109e2579082916000916109b4575b50858451809681936303d1689d60e11b83528a8301525afa9182156109aa575060009161097e575b50905061089a8686610721565b811061093b575b5084151580610933575b6108e7575b50506108c692916108c09161072e565b9461072e565b96868410156108db576001905b0196926107cf565b50505094505050505090565b6108f1858961072e565b9160016108fe868661072e565b1517156109205750506109125738806108b0565b995050505050505050505090565b601190634e487b7160e01b600052526000fd5b5060016108ab565b909385610955575b508461094e9161072e565b92386108a1565b610977906109718761096b8561094e969a610436565b92610721565b90610449565b9490610943565b82813d83116109a3575b61099281836103a0565b8101031261017c575051803861088d565b503d610988565b513d6000823e3d90fd5b9182813d83116109db575b6109c981836103a0565b8101031261017c575081905138610865565b503d6109bf565b83513d6000823e3d90fd5b50505094989050600191506108d3565b835162461bcd60e51b8152600481018390526011602482015270496e61637469766520737472617465677960781b6044820152606490fd5b97505050505050505090565b85548816845260019586019587955093810193909101906107b1565b969591956107cc565b5080511561078c565b50505091505090565b9294909391506040518093632319b8cf60e01b82528360648301961660048301526000938460248401526060604484015283518097526084830190602097888096019187905b828210610b2a575050505082809103915afa928315610b1d578193610aec575b505050818082109118021890565b9091809350813d8311610b16575b610b0481836103a0565b8101031261017c575051388080610ade565b503d610afa565b50604051903d90823e3d90fd5b8351811685528a978a97509485019490930192600190910190610abe565b610b556107488383611445565b600e8201546001600160a01b039391929190841680610dde57505060028082015480841115610a6f5760009460059660ff6005860154168015610dd5575b15610dcc57506004840160405180828193548084526020809401918b5260208b20938b905b828210610db057505050610bce925003826103a0565b969591955b82965b8851881015610a3557602083818a851b8c01015116916003880191836000528281526040928360002054156109fd578460005281528783600020015492610c1d838c610721565b8480821091180293848118948114610da05784610c3a9187611483565b94815191636c82bbbf60e11b8352600493308585015260249381818681875afa9081156109e257908291600091610d72575b50858451809681936303d1689d60e11b83528a8301525afa9182156109aa5750600091610d46575b509050610ca18686610721565b8110610d0f575b5084151580610d07575b610cdc575b5050610cc792916108c09161072e565b96868410156108db576001905b019692610bd6565b610ce6858961072e565b916001610cf3868661072e565b151715610920575050610912573880610cb7565b506001610cb2565b909385610d29575b5084610d229161072e565b9238610ca8565b610d3f906109718761096b85610d22969a610436565b9490610d17565b82813d8311610d6b575b610d5a81836103a0565b8101031261017c5750518038610c94565b503d610d50565b9182813d8311610d99575b610d8781836103a0565b8101031261017c575081905138610c6c565b503d610d7d565b5050509498905060019150610cd4565b8554881684526001958601958795509381019390910190610bb8565b96959195610bd3565b50805115610b93565b9294909391506040518093632319b8cf60e01b82528360648301961660048301526000938460248401526060604484015283518097526084830190602097888096019187905b828210610e51575050505082809103915afa928315610b1d578193610aec57505050818082109118021890565b8351811685528a978a97509485019490930192600190910190610e24565b9092916127109081811161125057610e90610e8a8685611445565b846105ea565b600e8401546001600160a01b03969193919087169081611191575050600291600285015480851115611186579160009560059760ff600583015416801561117d575b1561117457506004810160405180828193548084526020809401918c528d60208d20948d915b8383106111575750505050610f0f925003826103a0565b979693965b84975b8951891015610912576020908b828b851b8d010151169060038501918060005282845260409283600020541561111f578160005284528983600020015492610f5f838d610721565b848082109118029384811894811461110f5784610f7c9184611483565b948151636c82bbbf60e11b81526004308183015260249083838381895afa9283156111045790849392916000936110d0575b50855196879384926303d1689d60e11b84528301525afa9182156109aa57506000916110a4575b509050610fe28484610721565b811061106d575b5082151580611064575b61102f575b61100c92916110069161072e565b9661072e565b9787861015611021576001905b019794610f17565b505050505094505050505090565b611039838961072e565b8661104d89611048868661072e565b610436565b041015610ff8579b50505050505050505050505090565b50858710610ff3565b909183611087575b50826110809161072e565b9038610fe9565b61109d906109718561096b856110809698610436565b9290611075565b82813d83116110c9575b6110b881836103a0565b8101031261017c5750518038610fd5565b503d6110ae565b9192909382813d83116110fd575b6110e881836103a0565b8101031261017c575090839291519138610fae565b503d6110de565b85513d6000823e3d90fd5b5050509699905060019150611019565b835162461bcd60e51b8152600481018690526011602482015270496e61637469766520737472617465677960781b6044820152606490fd5b86541684526001958601958795509381019391909101908f610ef8565b97969396610f14565b50805115610ed2565b505050509250505090565b95939694509050604051938492632319b8cf60e01b84528160648501971660048501526024840152606060448401528351809652608483019060209687809601916000905b828210611232575050505082809103915afa9182156106a257600092611204575b5050818082109118021890565b90809250813d831161122b575b61121b81836103a0565b81010312610353575138806111f7565b503d611211565b835181168552899789975094850194909301926001909101906111d6565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6178206c6f737360801b6044820152606490fd5b600019821480156112bb575b61054d576112a761052a6105218361140f565b9181156104ef576104dc916104cb91610436565b508115611294565b600019821480156112e2575b61054d576106ca61052a6105218361140f565b5081156112cf565b60001982148015611309575b6107135761070261052a6105218361140f565b5081156112f6565b906001600160a01b0390811690811580156113d1575b6113c957600d830154169081611369575050600781015490600019821461054d57611351906113da565b81811015611362576104ec91610721565b5050600090565b6020919250602460405180948193632355178960e11b835260048301525afa9081156106a25760009161139a575090565b90506020813d6020116113c1575b816113b5602093836103a0565b81010312610353575190565b3d91506113a8565b505050600090565b50308214611327565b546040516278744560e21b815290602090829060049082906001600160a01b03165afa9081156106a25760009161139a575090565b546040516318160ddd60e01b815290602090829060049082906001600160a01b03165afa9081156106a25760009161139a575090565b546040516370a0823160e01b81526001600160a01b0392831660048201529160209183916024918391165afa9081156106a25760009161139a575090565b6040516370a0823160e01b8152306004820152602092916001600160a01b0316908381602481855afa80156106a2578491600091611565575b506024604051809481936303d1689d60e11b835260048301525afa9283156106a257600093611535575b505080821080159061152d575b6113c9576104d66115076115189385610436565b936115128386610449565b90610721565b61151f5790565b600181018091116104205790565b5080156114f3565b9080929350813d831161155e575b61154d81836103a0565b8101031261035357519038806114e6565b503d611543565b82819392503d831161158d575b61157c81836103a0565b8101031261035357839051386114bc565b503d611572565b600f8101546001600160a01b0390811615611362578160106115e66115d26115ef946115126115c864496cebb8009861140f565b9186541686611445565b6115e0601185015442610721565b90610436565b91015490610436565b049056fea2646970667358221220758565a34ae72c537607cf112089d36ab85470d1c1f0e533fef636d91f2988e964736f6c63430008180033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c80630d25bbb51461032857806310968a051461031957806310e005b1146102f157806313567f29146102e2578063233d87e7146102245780634b2ec7c9146101ea5780635a7d5142146101d5578063612126c81461017f57806368274922146101c05780637ce1f8741461019957806389f28678146101215780638a22c543146101845780639eea8ab81461017f578063a72a276914610150578063b3fc5db91461013b578063c35e0c6614610126578063ccb92db6146101215763cffbf4ac146100e757600080fd5b8160031936011261011d5760209261011691610101610358565b9084519261010e8461036e565b835235610b48565b9051908152f35b8280fd5b6103fb565b6020836101166101353661033d565b90611288565b60208361011661014a366103c2565b9161060e565b50918160031936011261017c575061011660209235610176610170610358565b82611311565b906105ea565b80fd5b6103e5565b602083610116610193366103c2565b91610559565b5091602036600319011261017c5750610116602092356101766101bb82610633565b61040f565b6020836101166101cf366103c2565b916106e6565b6020836101166101e4366103c2565b916112ea565b508160031936011261011d5760209261021e61011692359161020a610358565b8551916102168361036e565b82528361073b565b906106ae565b50608036600319011261011d57610239610358565b67ffffffffffffffff936064358581116102cb57366023820112156102cb57808401359586116102cf578560051b60209286519761027a602084018a6103a0565b885260246020890192840101923684116102cb57602401915b8383106102ac576020886101168b6044358a8c35610e6f565b82356001600160a01b038116810361011d578152918401918401610293565b5080fd5b634e487b7160e01b825260418452602482fd5b60208361011661021e3661033d565b5091602036600319011261017c5750610116602092356103136101bb82610633565b90610502565b6020836101166101763661033d565b6020836101166103373661033d565b90610482565b6040906003190112610353576004359060243590565b600080fd5b602435906001600160a01b038216820361035357565b6020810190811067ffffffffffffffff82111761038a57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761038a57604052565b606090600319011261035357600435906024359060443560048110156103535790565b60206103f36103133661033d565b604051908152f35b60206103f36104093661033d565b906112c3565b60ff16604d811161042057600a0a90565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561042057565b8115610453570490565b634e487b7160e01b600052601260045260246000fd5b8115610453570690565b60001981146104205760010190565b90600019811480156104fa575b6104f5576104b76104b16104a28461140f565b6104ab85611594565b9061072e565b926113da565b9082156104ef576104dc916104cb91610436565b916104d68184610449565b92610469565b6104e35790565b6104ec90610473565b90565b91505090565b905090565b50801561048f565b60001982148015610551575b61054d5761053061052a6105218361140f565b6104ab84611594565b916113da565b811561054857610543906104ec93610436565b610449565b505090565b5090565b50811561050e565b90600019811480156105e2575b6104ef576105796104b16104a28461140f565b9082156105db579061058a91610436565b906105958183610449565b9260048110156105c55760011491826105b2575b50506104e35790565b6105bc9250610469565b151538806105a9565b634e487b7160e01b600052602160045260246000fd5b9250505090565b508015610566565b60001982148015610606575b61054d5761053061052a8261140f565b5081156105f6565b906000198114801561062b575b6104ef576105796104b18361140f565b50801561061b565b5460405163313ce56760e01b815290602090829060049082906001600160a01b03165afa9081156106a257600091610669575090565b6020813d60201161069a575b81610682602093836103a0565b810103126102cb57519060ff8216820361017c575090565b3d9150610675565b6040513d6000823e3d90fd5b600019821480156106de575b61054d576106ca61052a8261140f565b90801561054857610543906104ec93610436565b5081156106ba565b60001982148015610719575b6107135761070261052a8261140f565b9181156105db579061058a91610436565b50905090565b5081156106f2565b9190820391821161042057565b9190820180921161042057565b61074e6107488383611445565b826105ea565b600e8201546001600160a01b039391929190841680610a7857505060028082015480841115610a6f5760009460059660ff6005860154168015610a66575b15610a5d57506004840160405180828193548084526020809401918b5260208b20938b905b828210610a41575050506107c7925003826103a0565b969591955b82965b8851881015610a3557602083818a851b8c01015116916003880191836000528281526040928360002054156109fd578460005281528783600020015492610816838c610721565b84808210911802938481189481146109ed57846108339187611483565b94815191636c82bbbf60e11b8352600493308585015260249381818681875afa9081156109e2579082916000916109b4575b50858451809681936303d1689d60e11b83528a8301525afa9182156109aa575060009161097e575b50905061089a8686610721565b811061093b575b5084151580610933575b6108e7575b50506108c692916108c09161072e565b9461072e565b96868410156108db576001905b0196926107cf565b50505094505050505090565b6108f1858961072e565b9160016108fe868661072e565b1517156109205750506109125738806108b0565b995050505050505050505090565b601190634e487b7160e01b600052526000fd5b5060016108ab565b909385610955575b508461094e9161072e565b92386108a1565b610977906109718761096b8561094e969a610436565b92610721565b90610449565b9490610943565b82813d83116109a3575b61099281836103a0565b8101031261017c575051803861088d565b503d610988565b513d6000823e3d90fd5b9182813d83116109db575b6109c981836103a0565b8101031261017c575081905138610865565b503d6109bf565b83513d6000823e3d90fd5b50505094989050600191506108d3565b835162461bcd60e51b8152600481018390526011602482015270496e61637469766520737472617465677960781b6044820152606490fd5b97505050505050505090565b85548816845260019586019587955093810193909101906107b1565b969591956107cc565b5080511561078c565b50505091505090565b9294909391506040518093632319b8cf60e01b82528360648301961660048301526000938460248401526060604484015283518097526084830190602097888096019187905b828210610b2a575050505082809103915afa928315610b1d578193610aec575b505050818082109118021890565b9091809350813d8311610b16575b610b0481836103a0565b8101031261017c575051388080610ade565b503d610afa565b50604051903d90823e3d90fd5b8351811685528a978a97509485019490930192600190910190610abe565b610b556107488383611445565b600e8201546001600160a01b039391929190841680610dde57505060028082015480841115610a6f5760009460059660ff6005860154168015610dd5575b15610dcc57506004840160405180828193548084526020809401918b5260208b20938b905b828210610db057505050610bce925003826103a0565b969591955b82965b8851881015610a3557602083818a851b8c01015116916003880191836000528281526040928360002054156109fd578460005281528783600020015492610c1d838c610721565b8480821091180293848118948114610da05784610c3a9187611483565b94815191636c82bbbf60e11b8352600493308585015260249381818681875afa9081156109e257908291600091610d72575b50858451809681936303d1689d60e11b83528a8301525afa9182156109aa5750600091610d46575b509050610ca18686610721565b8110610d0f575b5084151580610d07575b610cdc575b5050610cc792916108c09161072e565b96868410156108db576001905b019692610bd6565b610ce6858961072e565b916001610cf3868661072e565b151715610920575050610912573880610cb7565b506001610cb2565b909385610d29575b5084610d229161072e565b9238610ca8565b610d3f906109718761096b85610d22969a610436565b9490610d17565b82813d8311610d6b575b610d5a81836103a0565b8101031261017c5750518038610c94565b503d610d50565b9182813d8311610d99575b610d8781836103a0565b8101031261017c575081905138610c6c565b503d610d7d565b5050509498905060019150610cd4565b8554881684526001958601958795509381019390910190610bb8565b96959195610bd3565b50805115610b93565b9294909391506040518093632319b8cf60e01b82528360648301961660048301526000938460248401526060604484015283518097526084830190602097888096019187905b828210610e51575050505082809103915afa928315610b1d578193610aec57505050818082109118021890565b8351811685528a978a97509485019490930192600190910190610e24565b9092916127109081811161125057610e90610e8a8685611445565b846105ea565b600e8401546001600160a01b03969193919087169081611191575050600291600285015480851115611186579160009560059760ff600583015416801561117d575b1561117457506004810160405180828193548084526020809401918c528d60208d20948d915b8383106111575750505050610f0f925003826103a0565b979693965b84975b8951891015610912576020908b828b851b8d010151169060038501918060005282845260409283600020541561111f578160005284528983600020015492610f5f838d610721565b848082109118029384811894811461110f5784610f7c9184611483565b948151636c82bbbf60e11b81526004308183015260249083838381895afa9283156111045790849392916000936110d0575b50855196879384926303d1689d60e11b84528301525afa9182156109aa57506000916110a4575b509050610fe28484610721565b811061106d575b5082151580611064575b61102f575b61100c92916110069161072e565b9661072e565b9787861015611021576001905b019794610f17565b505050505094505050505090565b611039838961072e565b8661104d89611048868661072e565b610436565b041015610ff8579b50505050505050505050505090565b50858710610ff3565b909183611087575b50826110809161072e565b9038610fe9565b61109d906109718561096b856110809698610436565b9290611075565b82813d83116110c9575b6110b881836103a0565b8101031261017c5750518038610fd5565b503d6110ae565b9192909382813d83116110fd575b6110e881836103a0565b8101031261017c575090839291519138610fae565b503d6110de565b85513d6000823e3d90fd5b5050509699905060019150611019565b835162461bcd60e51b8152600481018690526011602482015270496e61637469766520737472617465677960781b6044820152606490fd5b86541684526001958601958795509381019391909101908f610ef8565b97969396610f14565b50805115610ed2565b505050509250505090565b95939694509050604051938492632319b8cf60e01b84528160648501971660048501526024840152606060448401528351809652608483019060209687809601916000905b828210611232575050505082809103915afa9182156106a257600092611204575b5050818082109118021890565b90809250813d831161122b575b61121b81836103a0565b81010312610353575138806111f7565b503d611211565b835181168552899789975094850194909301926001909101906111d6565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6178206c6f737360801b6044820152606490fd5b600019821480156112bb575b61054d576112a761052a6105218361140f565b9181156104ef576104dc916104cb91610436565b508115611294565b600019821480156112e2575b61054d576106ca61052a6105218361140f565b5081156112cf565b60001982148015611309575b6107135761070261052a6105218361140f565b5081156112f6565b906001600160a01b0390811690811580156113d1575b6113c957600d830154169081611369575050600781015490600019821461054d57611351906113da565b81811015611362576104ec91610721565b5050600090565b6020919250602460405180948193632355178960e11b835260048301525afa9081156106a25760009161139a575090565b90506020813d6020116113c1575b816113b5602093836103a0565b81010312610353575190565b3d91506113a8565b505050600090565b50308214611327565b546040516278744560e21b815290602090829060049082906001600160a01b03165afa9081156106a25760009161139a575090565b546040516318160ddd60e01b815290602090829060049082906001600160a01b03165afa9081156106a25760009161139a575090565b546040516370a0823160e01b81526001600160a01b0392831660048201529160209183916024918391165afa9081156106a25760009161139a575090565b6040516370a0823160e01b8152306004820152602092916001600160a01b0316908381602481855afa80156106a2578491600091611565575b506024604051809481936303d1689d60e11b835260048301525afa9283156106a257600093611535575b505080821080159061152d575b6113c9576104d66115076115189385610436565b936115128386610449565b90610721565b61151f5790565b600181018091116104205790565b5080156114f3565b9080929350813d831161155e575b61154d81836103a0565b8101031261035357519038806114e6565b503d611543565b82819392503d831161158d575b61157c81836103a0565b8101031261035357839051386114bc565b503d611572565b600f8101546001600160a01b0390811615611362578160106115e66115d26115ef946115126115c864496cebb8009861140f565b9186541686611445565b6115e0601185015442610721565b90610436565b91015490610436565b049056fea2646970667358221220758565a34ae72c537607cf112089d36ab85470d1c1f0e533fef636d91f2988e964736f6c63430008180033",
  "libraries": {
    "ERC20Logic": "0x5628db49dEEbdb1bCE3402F567ea5D2c40C83415"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
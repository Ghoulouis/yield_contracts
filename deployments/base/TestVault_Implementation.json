{
  "address": "0xDAd9C8B0F883d297Fa5496a3fb48445A8567f1aA",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "DebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGovernment",
          "type": "address"
        }
      ],
      "name": "GovernmentChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "RequestedWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IVault.StrategyChangeType",
          "name": "changeType",
          "type": "uint8"
        }
      ],
      "name": "StrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        }
      ],
      "name": "StrategyReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "TreasuryTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        }
      ],
      "name": "UpdateAccountant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoAllocate",
          "type": "bool"
        }
      ],
      "name": "UpdateAutoAllocate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "UpdateDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdateDepositLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateDepositLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdateFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateManagementFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinimumTotalIdle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitMaxUnlockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "UpdateUseDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateWithdrawLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "addToQueue",
          "type": "bool"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "forceRevokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultQueue",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_profitMaxUnlockTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTotalIdle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShareWithFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "processReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "revokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccountant",
          "type": "address"
        }
      ],
      "name": "setAccountant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "autoAllocate",
          "type": "bool"
        }
      ],
      "name": "setAutoAllocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "setDefaultQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        }
      ],
      "name": "setDepositLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        }
      ],
      "name": "setDepositLimitForce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDepositLimitModule",
          "type": "address"
        }
      ],
      "name": "setDepositLimitModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDepositLimitModule",
          "type": "address"
        }
      ],
      "name": "setDepositLimitModuleForce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "setMinimumTotalIdle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProfitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "setProfitMaxUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "setUseDefaultQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWithdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "setWithdrawLimitModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "spendAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "activation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastReport",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.StrategyData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIdle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyWithFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        }
      ],
      "name": "updateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMaxDebt",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDebtForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultData",
      "outputs": [
        {
          "internalType": "address",
          "name": "addressVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalIdle",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useDefaultQueue",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "autoAllocate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minimumTotalIdle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitMaxUnlockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullProfitUnlockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitUnlockingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastProfitUpdate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositLimitModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawLimitModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeTakeManagementFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabc845858d8ce5e2142d03fe76c5813192c56c7903900c2b7a3d141e0d6ffc19",
  "receipt": {
    "to": null,
    "from": "0xEE6Eacc608A4524DF5Cb1a33CE7840139a8deA1A",
    "contractAddress": "0xDAd9C8B0F883d297Fa5496a3fb48445A8567f1aA",
    "transactionIndex": 139,
    "gasUsed": "3462837",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x38a32400326db6fb27880ad9cc62c55b4cc9bfa67df0ec197f8cf9c9b999943f",
    "transactionHash": "0xabc845858d8ce5e2142d03fe76c5813192c56c7903900c2b7a3d141e0d6ffc19",
    "logs": [],
    "blockNumber": 33886468,
    "cumulativeGasUsed": "34920759",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "46ecef0fc11bca115520f50990009ab4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernment\",\"type\":\"address\"}],\"name\":\"GovernmentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"RequestedWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.StrategyChangeType\",\"name\":\"changeType\",\"type\":\"uint8\"}],\"name\":\"StrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TreasuryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"name\":\"UpdateAccountant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoAllocate\",\"type\":\"bool\"}],\"name\":\"UpdateAutoAllocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"UpdateDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateDepositLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"UpdateFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"}],\"name\":\"UpdateManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumTotalIdle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitMaxUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"UpdateUseDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateWithdrawLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"addToQueue\",\"type\":\"bool\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"forceRevokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultQueue\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_profitMaxUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTotalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShareWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"processReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccountant\",\"type\":\"address\"}],\"name\":\"setAccountant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoAllocate\",\"type\":\"bool\"}],\"name\":\"setAutoAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"setDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimitForce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDepositLimitModule\",\"type\":\"address\"}],\"name\":\"setDepositLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDepositLimitModule\",\"type\":\"address\"}],\"name\":\"setDepositLimitModuleForce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"setMinimumTotalIdle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProfitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"setProfitMaxUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"setUseDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWithdrawLimitModule\",\"type\":\"address\"}],\"name\":\"setWithdrawLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"spendAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.StrategyData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"name\":\"updateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxDebt\",\"type\":\"uint256\"}],\"name\":\"updateMaxDebtForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addressVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIdle\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoAllocate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumTotalIdle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullProfitUnlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitUnlockingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProfitUpdate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositLimitModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawLimitModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeTakeManagementFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IAccessControl,\\n    ERC165Upgradeable\\n{\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation =\\n        0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage()\\n        private\\n        pure\\n        returns (AccessControlStorage storage $)\\n    {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {}\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {}\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(\\n        bytes32 role,\\n        address callerConfirmation\\n    ) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(\\n        bytes32 role,\\n        address account\\n    ) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(\\n        bytes32 role,\\n        address account\\n    ) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15be2263fee08b81b30097278b3f715a0db7dd657ea70459755de0f3e4db8f2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e86b70fa5a7bd63795161c0882676fde6a18bbb1991938ef014fb0184b4b13\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Implementation of the ERC-4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC-20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC-20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\\n * underlying math can be found xref:ROOT:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626Upgradeable is\\n    Initializable,\\n    ERC20Upgradeable,\\n    IERC4626\\n{\\n    using Math for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC4626\\n    struct ERC4626Storage {\\n        IERC20 _asset;\\n        uint8 _underlyingDecimals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC4626\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC4626StorageLocation =\\n        0x0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e00;\\n\\n    function _getERC4626Storage()\\n        private\\n        pure\\n        returns (ERC4626Storage storage $)\\n    {\\n        assembly {\\n            $.slot := ERC4626StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(\\n        address receiver,\\n        uint256 assets,\\n        uint256 max\\n    );\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(\\n        address owner,\\n        uint256 assets,\\n        uint256 max\\n    );\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\\n     */\\n    function __ERC4626_init(IERC20 asset_) internal onlyInitializing {\\n        __ERC4626_init_unchained(asset_);\\n    }\\n\\n    function __ERC4626_init_unchained(IERC20 asset_) internal onlyInitializing {\\n        ERC4626Storage storage $ = _getERC4626Storage();\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        $._underlyingDecimals = success ? assetDecimals : 18;\\n        $._asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(\\n        IERC20 asset_\\n    ) private view returns (bool ok, uint8 assetDecimals) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_)\\n            .staticcall(abi.encodeCall(IERC20Metadata.decimals, ()));\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals()\\n        public\\n        view\\n        virtual\\n        override(IERC20Metadata, ERC20Upgradeable)\\n        returns (uint8)\\n    {\\n        ERC4626Storage storage $ = _getERC4626Storage();\\n        return $._underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        ERC4626Storage storage $ = _getERC4626Storage();\\n        return address($._asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return IERC20(asset()).balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}. */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256) {\\n        return\\n            assets.mulDiv(\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                totalAssets() + 1,\\n                rounding\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256) {\\n        return\\n            shares.mulDiv(\\n                totalAssets() + 1,\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                rounding\\n            );\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If asset() is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(\\n            IERC20(asset()),\\n            caller,\\n            address(this),\\n            assets\\n        );\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If asset() is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(IERC20(asset()), receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x77758b35a606228e572c8638963bc0d92f197d2dc0b98388cd84339d44faa958\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x31fc44a7323dee20310373aa7fe1fa9e0b302329b79ee5bbad859a9eac40b029\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/interfaces/IAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IAccountant {\\n    function report(\\n        address strategy,\\n        uint256 gain,\\n        uint256 loss\\n    ) external returns (uint256 totalFees, uint256 totalRefunds);\\n}\\n\",\"keccak256\":\"0xe773c09b527337cf3faf5294d9c32a2a113fa7cd99bbf3d83e935a9825981000\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IDepositLimitModule {\\n    function availableDepositLimit(\\n        address receiver\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa73fdcc52d8746a357d4a2fcbe81473c06fb252d4bc702e1d9aaa5397230a3c7\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IRoleModule is IAccessControl {\\n    function availableDepositLimit(\\n        address receiver\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0953bb1b114be61270478f88508d473bba3341094f0c4aabac22a06896460c7\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IStrategy {\\n    function asset() external view returns (address);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256);\\n    function maxRedeem(address owner) external view returns (uint256);\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x47f3815b16a5eada1aecbae69d4a97453f26960f62780d71e92106772eb4a869\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n    // Enums\\n    enum StrategyChangeType {\\n        ADDED,\\n        REVOKED\\n    }\\n\\n    event Deposited(address indexed user, uint256 amount, uint256 shares);\\n    event RequestedWithdraw(address indexed user, uint256 shares);\\n    event Withdrawn(\\n        address indexed user,\\n        uint256 shares,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n    event TreasuryTransferred();\\n    event RateUpdated(uint256 oldRate, uint256 newRate);\\n    event GovernmentChanged(address newGovernment);\\n    event FeeUpdated(uint256 oldFee, uint256 newFee);\\n    event StrategyChanged(\\n        address indexed strategy,\\n        StrategyChangeType changeType\\n    );\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 currentDebt,\\n        uint256 performanceFee,\\n        uint256 refund\\n    );\\n    event DebtUpdated(\\n        address indexed strategy,\\n        uint256 currentDebt,\\n        uint256 newDebt\\n    );\\n    event UpdateAccountant(address indexed accountant);\\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\\n    event UpdateDefaultQueue(address[] newDefaultQueue);\\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\\n    event UpdateAutoAllocate(bool autoAllocate);\\n    event UpdateDepositLimit(uint256 depositLimit);\\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\\n    event UpdateManagementFee(uint256 managementFee);\\n    event UpdateFeeRecipient(address feeRecipient);\\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\n    event ManagementFeeMinted(address indexed feeRecipient, uint256 amount);\\n\\n    function mint(address receiver, uint256 assets) external;\\n\\n    function burn(address receiver, uint256 assets) external;\\n\\n    function spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) external;\\n\\n    function asset() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256);\\n    function withdraw(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function maxWithdraw(address owner) external view returns (uint256);\\n    function maxWithdraw(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x93c93c8afea2bf535f5d5610b21fb2ed9608d5cc62e60dba949fee73cf880f3b\",\"license\":\"MIT\"},\"contracts/interfaces/IWithdrawLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IWithdrawLimitModule {\\n    function availableWithdrawLimit(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] calldata strategies\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8eea5e8a25c61d046e8e244cf6e0652efd080cdab8ef757f9bb0904d66dbdcfd\",\"license\":\"MIT\"},\"contracts/protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IRoleModule.sol\\\";\\nimport \\\"../interfaces/IAccountant.sol\\\";\\nimport \\\"../interfaces/IDepositLimitModule.sol\\\";\\nimport \\\"../interfaces/IWithdrawLimitModule.sol\\\";\\n\\nimport \\\"./VaultStorage.sol\\\";\\nimport {DataTypes} from \\\"./libraries/types/DataTypes.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {ERC20Logic} from \\\"./libraries/logic/ERC20Logic.sol\\\";\\nimport {ERC4626Logic} from \\\"./libraries/logic/ERC4626Logic.sol\\\";\\nimport {InitializeLogic} from \\\"./libraries/logic/InitializeLogic.sol\\\";\\nimport {DepositLogic} from \\\"./libraries/logic/DepositLogic.sol\\\";\\nimport {WithdrawLogic} from \\\"./libraries/logic/WithdrawLogic.sol\\\";\\nimport {UnlockSharesLogic} from \\\"./libraries/logic/UnlockSharesLogic.sol\\\";\\nimport {DebtLogic} from \\\"./libraries/logic/DebtLogic.sol\\\";\\nimport {ConfiguratorLogic} from \\\"./libraries/logic/ConfiguratorLogic.sol\\\";\\nimport {ManagementFeeLogic} from \\\"./libraries/logic/internal/ManagementFeeLogic.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\n\\ncontract Vault is\\n    IVault,\\n    VaultStorage,\\n    ERC4626Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using DepositLogic for DataTypes.VaultData;\\n    using WithdrawLogic for DataTypes.VaultData;\\n\\n    modifier OnlyVault() {\\n        require(msg.sender == address(this), \\\"Only vault can mint\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 _asset,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _profitMaxUnlockTime,\\n        address governance\\n    ) public initializer {\\n        __ERC20_init(_name, _symbol);\\n        __ERC4626_init(_asset);\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n\\n        InitializeLogic.ExecuteInitialize(vaultData, _profitMaxUnlockTime);\\n\\n        _grantRole(Constants.ROLE_GOVERNANCE_MANAGER, governance);\\n        _grantRole(Constants.ROLE_ADD_STRATEGY_MANAGER, governance);\\n\\n        _setRoleAdmin(\\n            Constants.ROLE_GOVERNANCE_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_ADD_STRATEGY_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_REVOKE_STRATEGY_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_ACCOUNTANT_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_QUEUE_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_REPORTING_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_DEBT_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_MAX_DEBT_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_DEPOSIT_LIMIT_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_WITHDRAW_LIMIT_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_MINIMUM_IDLE_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_PROFIT_UNLOCK_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_DEBT_PURCHASER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n        _setRoleAdmin(\\n            Constants.ROLE_EMERGENCY_MANAGER,\\n            Constants.ROLE_GOVERNANCE_MANAGER\\n        );\\n    }\\n\\n    // ERC20 overrides\\n\\n    function asset()\\n        public\\n        view\\n        override(ERC4626Upgradeable, IVault)\\n        returns (address)\\n    {\\n        return super.asset();\\n    }\\n\\n    function decimals()\\n        public\\n        view\\n        override(ERC4626Upgradeable, IVault)\\n        returns (uint8)\\n    {\\n        return super.decimals();\\n    }\\n\\n    // ERC4626 overrides\\n\\n    function totalSupply()\\n        public\\n        view\\n        override(IERC20, ERC20Upgradeable)\\n        returns (uint256)\\n    {\\n        return super.totalSupply() - UnlockSharesLogic.unlockShares(vaultData);\\n    }\\n\\n    function totalSupplyWithFee() public view returns (uint256) {\\n        return\\n            totalSupply() +\\n            ManagementFeeLogic.viewCalculateManagementFee(vaultData);\\n    }\\n\\n    function totalAssets()\\n        public\\n        view\\n        override(IERC4626, ERC4626Upgradeable)\\n        returns (uint256)\\n    {\\n        return vaultData.totalIdle + vaultData.totalDebt;\\n    }\\n\\n    function maxDeposit(\\n        address receiver\\n    ) public view override(ERC4626Upgradeable, IVault) returns (uint256) {\\n        return ERC4626Logic.maxDeposit(vaultData, receiver);\\n    }\\n\\n    function maxMint(\\n        address user\\n    ) public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return ERC4626Logic.maxDeposit(vaultData, user);\\n    }\\n\\n    function maxWithdraw(\\n        address owner\\n    ) public view override(ERC4626Upgradeable, IVault) returns (uint256) {\\n        return ERC4626Logic.maxWithdraw(vaultData, owner);\\n    }\\n\\n    function maxWithdraw(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) public view override returns (uint256) {\\n        return ERC4626Logic.maxWithdraw(vaultData, owner, maxLoss, _strategies);\\n    }\\n\\n    function maxRedeem(\\n        address owner\\n    ) public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return ERC4626Logic.maxRedeem(vaultData, owner);\\n    }\\n\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return ERC4626Logic.previewDeposit(vaultData, assets);\\n    }\\n\\n    function previewMint(\\n        uint256 shares\\n    ) public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return ERC4626Logic.previewMint(vaultData, shares);\\n    }\\n\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return ERC4626Logic.previewWithdraw(vaultData, assets);\\n    }\\n\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return ERC4626Logic.previewRedeem(vaultData, shares);\\n    }\\n\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        override(ERC4626Upgradeable, IVault)\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        ManagementFeeLogic.caculateManagementFee(vaultData);\\n        return super.deposit(assets, receiver);\\n    }\\n\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    )\\n        public\\n        override(ERC4626Upgradeable, IERC4626)\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        ManagementFeeLogic.caculateManagementFee(vaultData);\\n        return super.mint(shares, receiver);\\n    }\\n\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal override {\\n        DepositLogic.executeDeposit(\\n            vaultData,\\n            caller,\\n            receiver,\\n            assets,\\n            shares\\n        );\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        ManagementFeeLogic.caculateManagementFee(vaultData);\\n        uint256 assets = ERC4626Logic.convertToAssets(\\n            vaultData,\\n            shares,\\n            Math.Rounding.Floor\\n        );\\n        return\\n            WithdrawLogic.executeRedeem(\\n                vaultData,\\n                _msgSender(),\\n                receiver,\\n                owner,\\n                assets,\\n                shares,\\n                0,\\n                new address[](0)\\n            );\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public override(ERC4626Upgradeable, IVault) returns (uint256) {\\n        ManagementFeeLogic.caculateManagementFee(vaultData);\\n        uint256 shares = ERC4626Logic.convertToShares(\\n            vaultData,\\n            assets,\\n            Math.Rounding.Ceil\\n        );\\n        return\\n            WithdrawLogic.executeRedeem(\\n                vaultData,\\n                _msgSender(),\\n                receiver,\\n                owner,\\n                assets,\\n                shares,\\n                0,\\n                new address[](0)\\n            );\\n    }\\n\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return ERC4626Logic.convertToAssets(vaultData, shares);\\n    }\\n\\n    function convertToShares(\\n        uint256 assets\\n    ) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return ERC4626Logic.convertToShares(vaultData, assets);\\n    }\\n\\n    // ERC20\\n\\n    function mint(address receiver, uint256 amount) external OnlyVault {\\n        _mint(receiver, amount);\\n    }\\n\\n    function burn(address owner, uint256 amount) external OnlyVault {\\n        _burn(owner, amount);\\n    }\\n\\n    function spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) external OnlyVault {\\n        _spendAllowance(owner, spender, value);\\n    }\\n\\n    // DEBT MANAGEMENT\\n\\n    function processReport(\\n        address strategy\\n    ) external nonReentrant onlyRole(Constants.ROLE_REPORTING_MANAGER) {\\n        DebtLogic.ExecuteProcessReport(vaultData, strategy);\\n    }\\n\\n    function updateDebt(\\n        address strategy,\\n        uint256 targetDebt,\\n        uint256 maxLoss\\n    ) external nonReentrant onlyRole(Constants.ROLE_DEBT_MANAGER) {\\n        DebtLogic.ExecuteUpdateDebt(vaultData, strategy, targetDebt, maxLoss);\\n    }\\n\\n    function updateMaxDebtForStrategy(\\n        address strategy,\\n        uint256 newMaxDebt\\n    ) external nonReentrant onlyRole(Constants.ROLE_MAX_DEBT_MANAGER) {\\n        DebtLogic.ExecuteUpdateMaxDebtForStrategy(\\n            vaultData,\\n            strategy,\\n            newMaxDebt\\n        );\\n    }\\n\\n    function buyDebt(\\n        address strategy,\\n        uint256 amount\\n    ) external nonReentrant onlyRole(Constants.ROLE_DEBT_PURCHASER) {\\n        DebtLogic.buyDebt(vaultData, strategy, amount);\\n    }\\n\\n    function setAutoAllocate(\\n        bool autoAllocate\\n    ) public onlyRole(Constants.ROLE_DEBT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetAutoAllocate(vaultData, autoAllocate);\\n    }\\n\\n    // CONFIGURATOR MANAGEMENT\\n\\n    function addStrategy(\\n        address strategy,\\n        bool addToQueue\\n    ) external nonReentrant onlyRole(Constants.ROLE_ADD_STRATEGY_MANAGER) {\\n        ConfiguratorLogic.ExecuteAddStrategy(vaultData, strategy, addToQueue);\\n    }\\n\\n    function revokeStrategy(\\n        address strategy\\n    ) external onlyRole(Constants.ROLE_REVOKE_STRATEGY_MANAGER) {\\n        ConfiguratorLogic.ExecuteRevokeStrategy(vaultData, strategy, false);\\n    }\\n\\n    function forceRevokeStrategy(\\n        address strategy\\n    ) external onlyRole(Constants.ROLE_REVOKE_STRATEGY_MANAGER) {\\n        ConfiguratorLogic.ExecuteRevokeStrategy(vaultData, strategy, true);\\n    }\\n\\n    function setDefaultQueue(\\n        address[] calldata newDefaultQueue\\n    ) external nonReentrant onlyRole(Constants.ROLE_QUEUE_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetDefaultQueue(vaultData, newDefaultQueue);\\n    }\\n\\n    function setUseDefaultQueue(\\n        bool useDefaultQueue\\n    ) external onlyRole(Constants.ROLE_QUEUE_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetUseDefaultQueue(vaultData, useDefaultQueue);\\n    }\\n\\n    function setDepositLimit(\\n        uint256 depositLimit\\n    ) external onlyRole(Constants.ROLE_DEPOSIT_LIMIT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetDepositLimit(\\n            vaultData,\\n            depositLimit,\\n            false\\n        );\\n    }\\n\\n    function setDepositLimitForce(\\n        uint256 depositLimit\\n    ) external onlyRole(Constants.ROLE_DEPOSIT_LIMIT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetDepositLimit(vaultData, depositLimit, true);\\n    }\\n\\n    function setDepositLimitModule(\\n        address newDepositLimitModule\\n    ) external onlyRole(Constants.ROLE_DEPOSIT_LIMIT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetDepositLimitModule(\\n            vaultData,\\n            newDepositLimitModule,\\n            false\\n        );\\n    }\\n\\n    function setDepositLimitModuleForce(\\n        address newDepositLimitModule\\n    ) external onlyRole(Constants.ROLE_DEPOSIT_LIMIT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetDepositLimitModule(\\n            vaultData,\\n            newDepositLimitModule,\\n            true\\n        );\\n    }\\n\\n    function setWithdrawLimitModule(\\n        address newWithdrawLimitModule\\n    ) external onlyRole(Constants.ROLE_WITHDRAW_LIMIT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetWithdrawLimitModule(\\n            vaultData,\\n            newWithdrawLimitModule\\n        );\\n    }\\n\\n    function setAccountant(\\n        address newAccountant\\n    ) external onlyRole(Constants.ROLE_ACCOUNTANT_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetAccountant(vaultData, newAccountant);\\n    }\\n\\n    function setMinimumTotalIdle(\\n        uint256 newMinimumTotalIdle\\n    ) external onlyRole(Constants.ROLE_MINIMUM_IDLE_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetMinimumTotalIdle(\\n            vaultData,\\n            newMinimumTotalIdle\\n        );\\n    }\\n\\n    function setManagementFee(\\n        uint256 newManagementFee\\n    ) external onlyRole(Constants.ROLE_GOVERNANCE_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetManagementFee(vaultData, newManagementFee);\\n    }\\n\\n    function setFeeRecipient(\\n        address newFeeRecipient\\n    ) external onlyRole(Constants.ROLE_GOVERNANCE_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetFeeRecipient(vaultData, newFeeRecipient);\\n    }\\n\\n    function setProfitMaxUnlockTime(\\n        uint256 newProfitMaxUnlockTime\\n    ) external onlyRole(Constants.ROLE_GOVERNANCE_MANAGER) {\\n        ConfiguratorLogic.ExecuteSetProfitMaxUnlockTime(\\n            vaultData,\\n            newProfitMaxUnlockTime\\n        );\\n    }\\n\\n    // VIEW FUNCTIONS\\n    function getDefaultQueue() external view returns (address[] memory) {\\n        return vaultData.defaultQueue;\\n    }\\n    function strategies(\\n        address strategy\\n    ) public view returns (DataTypes.StrategyData memory) {\\n        return vaultData.strategies[strategy];\\n    }\\n\\n    function pricePerShare() public view returns (uint256) {\\n        return ERC4626Logic.pricePerShare(vaultData);\\n    }\\n    function pricePerShareWithFee() public view returns (uint256) {\\n        return ERC4626Logic.pricePerShareWithFee(vaultData);\\n    }\\n\\n    function totalDebt() public view returns (uint256) {\\n        return vaultData.totalDebt;\\n    }\\n\\n    function totalIdle() public view returns (uint256) {\\n        return vaultData.totalIdle;\\n    }\\n\\n    function minimumTotalIdle() public view returns (uint256) {\\n        return vaultData.minimumTotalIdle;\\n    }\\n}\\n\",\"keccak256\":\"0x2662b8185e77b22f3ef5a2de50ed051eb028a74824d163c7ad08b0eb0c7b1b02\",\"license\":\"AGPL-3.0\"},\"contracts/protocol/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.24;\\n\\nimport {DataTypes} from \\\"./libraries/types/DataTypes.sol\\\";\\n\\ncontract VaultStorage {\\n    DataTypes.VaultData public vaultData;\\n}\\n\",\"keccak256\":\"0x44e072b137552c5688d696dde083ef51bfb0e1fa1ed8dd6af898287c8479d005\",\"license\":\"AGPL-3.0\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Constants {\\n    uint256 public constant MAX_QUEUE = 20;\\n    string public constant API_VERSION = \\\"0.0.1\\\";\\n    uint256 public constant MAX_PROFIT_UNLOCK_TIME = 365 days;\\n    uint256 public constant MAX_BPS = 10_000;\\n    uint256 public constant MAX_BPS_EXTENDED = 1_000_000_000_000;\\n\\n    uint256 public constant YEAR = 365 * 24 * 60 * 60;\\n\\n    bytes32 public constant ROLE_GOVERNANCE_MANAGER =\\n        keccak256(\\\"ROLE_GOVERNANCE_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_ADD_STRATEGY_MANAGER =\\n        keccak256(\\\"ROLE_ADD_STRATEGY_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_REVOKE_STRATEGY_MANAGER =\\n        keccak256(\\\"ROLE_REVOKE_STRATEGY_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_ACCOUNTANT_MANAGER =\\n        keccak256(\\\"ROLE_ACCOUNTANT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_QUEUE_MANAGER =\\n        keccak256(\\\"ROLE_ACCOUNTANT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_REPORTING_MANAGER =\\n        keccak256(\\\"ROLE_REPORTING_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_DEBT_MANAGER = keccak256(\\\"ROLE_DEBT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_MAX_DEBT_MANAGER =\\n        keccak256(\\\"ROLE_MAX_DEBT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_DEPOSIT_LIMIT_MANAGER =\\n        keccak256(\\\"ROLE_DEPOSIT_LIMIT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_WITHDRAW_LIMIT_MANAGER =\\n        keccak256(\\\"ROLE_WITHDRAW_LIMIT_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_MINIMUM_IDLE_MANAGER =\\n        keccak256(\\\"ROLE_MINIMUM_IDLE_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_PROFIT_UNLOCK_MANAGER =\\n        keccak256(\\\"ROLE_PROFIT_UNLOCK_MANAGER\\\");\\n\\n    bytes32 public constant ROLE_DEBT_PURCHASER =\\n        keccak256(\\\"ROLE_DEBT_PURCHASER\\\");\\n\\n    bytes32 public constant ROLE_EMERGENCY_MANAGER =\\n        keccak256(\\\"ROLE_EMERGENCY_MANAGER\\\");\\n}\\n\",\"keccak256\":\"0xe2e78b755f8bcb6fcc614ff951d2e2ae9b62f163ab283b410c5264f51a505017\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/ConfiguratorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ERC4626Logic} from \\\"./ERC4626Logic.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\n\\nimport {ManagementFeeLogic} from \\\"./internal/ManagementFeeLogic.sol\\\";\\nimport {IStrategy} from \\\"../../../interfaces/IStrategy.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nlibrary ConfiguratorLogic {\\n    using ERC20Logic for DataTypes.VaultData;\\n\\n    function ExecuteSetDefaultQueue(\\n        DataTypes.VaultData storage vault,\\n        address[] calldata newDefaultQueue\\n    ) external {\\n        require(\\n            newDefaultQueue.length <= Constants.MAX_QUEUE,\\n            \\\"Queue too long\\\"\\n        );\\n        for (uint256 i = 0; i < newDefaultQueue.length; i++) {\\n            require(\\n                vault.strategies[newDefaultQueue[i]].activation != 0,\\n                \\\"Inactive strategy\\\"\\n            );\\n        }\\n        vault.defaultQueue = newDefaultQueue;\\n        emit IVault.UpdateDefaultQueue(newDefaultQueue);\\n    }\\n\\n    function ExecuteSetUseDefaultQueue(\\n        DataTypes.VaultData storage vault,\\n        bool useDefaultQueue\\n    ) external {\\n        vault.useDefaultQueue = useDefaultQueue;\\n        emit IVault.UpdateUseDefaultQueue(useDefaultQueue);\\n    }\\n\\n    function ExecuteSetAutoAllocate(\\n        DataTypes.VaultData storage vault,\\n        bool autoAllocate\\n    ) external {\\n        vault.autoAllocate = autoAllocate;\\n        emit IVault.UpdateAutoAllocate(autoAllocate);\\n    }\\n\\n    function ExecuteAddStrategy(\\n        DataTypes.VaultData storage vault,\\n        address newStrategy,\\n        bool addToQueue\\n    ) external {\\n        require(\\n            newStrategy != address(0) && newStrategy != address(this),\\n            \\\"Invalid strategy\\\"\\n        );\\n        require(\\n            IStrategy(newStrategy).asset() == vault.asset(),\\n            \\\"Invalid asset\\\"\\n        );\\n        require(\\n            vault.strategies[newStrategy].activation == 0,\\n            \\\"Strategy already active\\\"\\n        );\\n\\n        vault.strategies[newStrategy] = DataTypes.StrategyData({\\n            activation: block.timestamp,\\n            lastReport: block.timestamp,\\n            currentDebt: 0,\\n            maxDebt: 0\\n        });\\n\\n        if (addToQueue && vault.defaultQueue.length < Constants.MAX_QUEUE) {\\n            vault.defaultQueue.push(newStrategy);\\n        }\\n\\n        emit IVault.StrategyChanged(\\n            newStrategy,\\n            IVault.StrategyChangeType.ADDED\\n        );\\n    }\\n\\n    function ExecuteRevokeStrategy(\\n        DataTypes.VaultData storage vault,\\n        address strategy,\\n        bool force\\n    ) external {\\n        require(\\n            vault.strategies[strategy].activation != 0,\\n            \\\"Strategy not active\\\"\\n        );\\n\\n        if (vault.strategies[strategy].currentDebt != 0) {\\n            require(force, \\\"Strategy has debt\\\");\\n            uint256 loss = vault.strategies[strategy].currentDebt;\\n            vault.totalDebt -= loss;\\n            emit IVault.StrategyReported(strategy, 0, loss, 0, 0, 0);\\n        }\\n\\n        delete vault.strategies[strategy];\\n\\n        address[] memory newQueue = new address[](Constants.MAX_QUEUE);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < vault.defaultQueue.length; i++) {\\n            if (vault.defaultQueue[i] != strategy) {\\n                newQueue[index] = vault.defaultQueue[i];\\n                index++;\\n            }\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(newQueue, index)\\n        }\\n        //newQueue.length = index;\\n        vault.defaultQueue = newQueue;\\n\\n        emit IVault.StrategyChanged(\\n            strategy,\\n            IVault.StrategyChangeType.REVOKED\\n        );\\n    }\\n\\n    function ExecuteSetDepositLimit(\\n        DataTypes.VaultData storage vault,\\n        uint256 depositLimit,\\n        bool force\\n    ) external {\\n        if (force) {\\n            if (vault.depositLimitModule != address(0)) {\\n                vault.depositLimitModule = address(0);\\n            }\\n        } else {\\n            require(vault.depositLimitModule == address(0), \\\"using module\\\");\\n        }\\n\\n        vault.depositLimit = depositLimit;\\n        emit IVault.UpdateDepositLimit(depositLimit);\\n    }\\n\\n    function ExecuteSetDepositLimitModule(\\n        DataTypes.VaultData storage vault,\\n        address newDepositLimitModule,\\n        bool force\\n    ) external {\\n        if (force) {\\n            if (vault.depositLimit != type(uint256).max) {\\n                vault.depositLimit = type(uint256).max;\\n                emit IVault.UpdateDepositLimit(type(uint256).max);\\n            }\\n        } else {\\n            require(\\n                vault.depositLimit == type(uint256).max,\\n                \\\"using deposit limit\\\"\\n            );\\n        }\\n\\n        vault.depositLimitModule = newDepositLimitModule;\\n        emit IVault.UpdateDepositLimitModule(newDepositLimitModule);\\n    }\\n\\n    function ExecuteSetWithdrawLimitModule(\\n        DataTypes.VaultData storage vault,\\n        address newWithdrawLimitModule\\n    ) external {\\n        vault.withdrawLimitModule = newWithdrawLimitModule;\\n        emit IVault.UpdateWithdrawLimitModule(newWithdrawLimitModule);\\n    }\\n\\n    function ExecuteSetAccountant(\\n        DataTypes.VaultData storage vault,\\n        address newAccountant\\n    ) external {\\n        vault.accountant = newAccountant;\\n        emit IVault.UpdateAccountant(newAccountant);\\n    }\\n\\n    function ExecuteSetMinimumTotalIdle(\\n        DataTypes.VaultData storage vault,\\n        uint256 newMinimumTotalIdle\\n    ) external {\\n        vault.minimumTotalIdle = newMinimumTotalIdle;\\n        emit IVault.UpdateMinimumTotalIdle(newMinimumTotalIdle);\\n    }\\n\\n    function ExecuteSetManagementFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 newManagementFee\\n    ) external {\\n        ManagementFeeLogic.caculateManagementFee(vault);\\n        vault.managementFee = newManagementFee;\\n        emit IVault.UpdateManagementFee(newManagementFee);\\n    }\\n\\n    function ExecuteSetFeeRecipient(\\n        DataTypes.VaultData storage vault,\\n        address newFeeRecipient\\n    ) external {\\n        ManagementFeeLogic.caculateManagementFee(vault);\\n        vault.feeRecipient = newFeeRecipient;\\n        emit IVault.UpdateFeeRecipient(newFeeRecipient);\\n    }\\n\\n    function ExecuteSetProfitMaxUnlockTime(\\n        DataTypes.VaultData storage vault,\\n        uint256 newProfitMaxUnlockTime\\n    ) external {\\n        require(\\n            newProfitMaxUnlockTime <= 31536000,\\n            \\\"Profit max unlock time too long\\\"\\n        );\\n\\n        if (newProfitMaxUnlockTime == 0) {\\n            uint256 shareBalance = vault.balanceOf(address(this));\\n            if (shareBalance > 0) {\\n                vault._burn(address(this), shareBalance);\\n            }\\n            vault.profitUnlockingRate = 0;\\n            vault.fullProfitUnlockDate = 0;\\n        }\\n\\n        vault.profitMaxUnlockTime = newProfitMaxUnlockTime;\\n        emit IVault.UpdateProfitMaxUnlockTime(newProfitMaxUnlockTime);\\n    }\\n}\\n\",\"keccak256\":\"0xbe31d204a37d99cb31091d667c51d6ac77f198fce33e1e91a91fe3e805919135\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/DebtLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\nimport {ERC4626Logic} from \\\"./ERC4626Logic.sol\\\";\\nimport {UnlockSharesLogic} from \\\"./UnlockSharesLogic.sol\\\";\\nimport {WithdrawFromStrategyLogic} from \\\"./internal/WithdrawFromStrategyLogic.sol\\\";\\nimport {UnrealisedLossesLogic} from \\\"./internal/UnrealisedLossesLogic.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\nimport {IStrategy} from \\\"../../../interfaces/IStrategy.sol\\\";\\nimport {IAccountant} from \\\"../../../interfaces/IAccountant.sol\\\";\\n\\nlibrary DebtLogic {\\n    using ERC20Logic for DataTypes.VaultData;\\n    using ERC4626Logic for DataTypes.VaultData;\\n    using UnlockSharesLogic for DataTypes.VaultData;\\n\\n    using SafeERC20 for IERC20;\\n\\n    function ExecuteProcessReport(\\n        DataTypes.VaultData storage vault,\\n        address strategy\\n    ) external returns (uint256 gain, uint256 loss) {\\n        require(strategy != address(this), \\\"Invalid strategy\\\");\\n        require(\\n            vault.strategies[strategy].activation != 0,\\n            \\\"Inactive strategy\\\"\\n        );\\n        address asset = vault.asset();\\n        uint256 totalAssets;\\n        uint256 currentDebt;\\n\\n        if (strategy != address(this)) {\\n            require(\\n                vault.strategies[strategy].activation != 0,\\n                \\\"Inactive strategy\\\"\\n            );\\n            uint256 strategyShares = IStrategy(strategy).balanceOf(\\n                address(this)\\n            );\\n            totalAssets = IStrategy(strategy).convertToAssets(strategyShares);\\n            currentDebt = vault.strategies[strategy].currentDebt;\\n        } else {\\n            totalAssets = IERC20(asset).balanceOf(address(this));\\n            currentDebt = vault.totalIdle;\\n        }\\n        if (totalAssets > currentDebt) {\\n            gain = totalAssets - currentDebt;\\n        } else {\\n            loss = currentDebt - totalAssets;\\n        }\\n        uint256 performanceFee;\\n        uint256 refund;\\n        if (vault.accountant != address(0)) {\\n            (performanceFee, refund) = IAccountant(vault.accountant).report(\\n                strategy,\\n                gain,\\n                loss\\n            );\\n            refund = Math.min(\\n                refund,\\n                Math.min(\\n                    IERC20(asset).balanceOf(vault.accountant),\\n                    IERC20(asset).allowance(vault.accountant, address(this))\\n                )\\n            );\\n        }\\n        uint256 performanceFeeShares;\\n        uint256 sharesToBurn;\\n\\n        if (loss + performanceFee > 0) {\\n            sharesToBurn = vault.convertToShares(\\n                loss + performanceFee,\\n                Math.Rounding.Ceil\\n            );\\n            if (performanceFee > 0) {\\n                performanceFeeShares =\\n                    (sharesToBurn * performanceFee) /\\n                    (loss + performanceFee);\\n            }\\n        }\\n        uint256 sharesToLock;\\n        if (gain + refund > 0 && vault.profitMaxUnlockTime != 0) {\\n            sharesToLock = vault.convertToShares(\\n                gain + refund,\\n                Math.Rounding.Floor\\n            );\\n        }\\n\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 unlockShares = vault.unlockShares();\\n        uint256 endingSupply = totalSupply + sharesToLock - sharesToBurn;\\n\\n        // mint reward\\n        if (endingSupply > totalSupply + unlockShares) {\\n            vault._mint(\\n                address(this),\\n                endingSupply - totalSupply - unlockShares\\n            );\\n        }\\n        // burn reward\\n        uint256 totalLockedShares = vault.balanceOf(address(this));\\n\\n        if (totalSupply + unlockShares > endingSupply) {\\n            uint256 toBurn = Math.min(\\n                totalSupply + unlockShares - endingSupply,\\n                totalLockedShares\\n            );\\n            vault._burn(address(this), toBurn);\\n        }\\n\\n        if (sharesToLock > sharesToBurn) {\\n            sharesToLock -= sharesToBurn;\\n        } else {\\n            sharesToLock = 0;\\n        }\\n\\n        if (refund > 0) {\\n            IERC20(vault.asset()).safeTransferFrom(\\n                vault.accountant,\\n                address(this),\\n                refund\\n            );\\n            vault.totalIdle += refund;\\n        }\\n        if (gain > 0) {\\n            currentDebt += gain;\\n            if (strategy != address(this)) {\\n                vault.strategies[strategy].currentDebt = currentDebt;\\n                vault.totalDebt += gain;\\n            } else {\\n                currentDebt += refund;\\n                vault.totalIdle = currentDebt;\\n            }\\n        }\\n\\n        if (loss > 0) {\\n            currentDebt -= loss;\\n            if (strategy != address(this)) {\\n                vault.strategies[strategy].currentDebt = currentDebt;\\n                vault.totalDebt -= loss;\\n            } else {\\n                currentDebt += refund;\\n                vault.totalIdle = currentDebt;\\n            }\\n        }\\n        if (performanceFeeShares > 0) {\\n            vault._mint(vault.accountant, performanceFeeShares);\\n        }\\n\\n        // Update unlocking rate and time to fully unlocked.\\n        totalLockedShares = vault.balanceOf(address(this));\\n        if (totalLockedShares > 0) {\\n            uint256 previouslyLockedTime;\\n            if (vault.fullProfitUnlockDate > block.timestamp) {\\n                previouslyLockedTime =\\n                    (totalLockedShares - sharesToLock) *\\n                    (vault.fullProfitUnlockDate - block.timestamp);\\n            }\\n            uint256 newProfitLockingPeriod = (previouslyLockedTime +\\n                sharesToLock *\\n                vault.profitMaxUnlockTime) / totalLockedShares;\\n            vault.profitUnlockingRate =\\n                (totalLockedShares * Constants.MAX_BPS_EXTENDED) /\\n                newProfitLockingPeriod;\\n            vault.fullProfitUnlockDate =\\n                block.timestamp +\\n                newProfitLockingPeriod;\\n            vault.lastProfitUpdate = block.timestamp;\\n        } else {\\n            vault.fullProfitUnlockDate = 0;\\n        }\\n\\n        vault.strategies[strategy].lastReport = block.timestamp;\\n        if (\\n            loss + performanceFee > gain + refund ||\\n            vault.profitMaxUnlockTime == 0\\n        ) {\\n            performanceFee = vault.convertToAssets(\\n                performanceFeeShares,\\n                Math.Rounding.Floor\\n            );\\n        }\\n        emit IVault.StrategyReported(\\n            strategy,\\n            gain,\\n            loss,\\n            currentDebt,\\n            performanceFee,\\n            refund\\n        );\\n        return (gain, loss);\\n    }\\n\\n    function ExecuteUpdateDebt(\\n        DataTypes.VaultData storage vault,\\n        address strategy,\\n        uint256 targetDebt,\\n        uint256 maxLoss\\n    ) external returns (uint256) {\\n        require(\\n            vault.strategies[strategy].activation != 0,\\n            \\\"Inactive strategy\\\"\\n        );\\n\\n        uint256 currentDebt = vault.strategies[strategy].currentDebt;\\n        require(targetDebt != currentDebt, \\\"No debt change\\\");\\n\\n        if (currentDebt > targetDebt) {\\n            uint256 assetsToWithdraw = currentDebt - targetDebt;\\n            if (vault.totalIdle + assetsToWithdraw < vault.minimumTotalIdle) {\\n                assetsToWithdraw = vault.minimumTotalIdle > vault.totalIdle\\n                    ? vault.minimumTotalIdle - vault.totalIdle\\n                    : 0;\\n                assetsToWithdraw = Math.min(assetsToWithdraw, currentDebt);\\n            }\\n\\n            uint256 withdrawable = IStrategy(strategy).convertToAssets(\\n                IStrategy(strategy).maxRedeem(address(this))\\n            );\\n\\n            assetsToWithdraw = Math.min(assetsToWithdraw, withdrawable);\\n            require(\\n                UnrealisedLossesLogic._assessShareOfUnrealisedLosses(\\n                    strategy,\\n                    currentDebt,\\n                    assetsToWithdraw\\n                ) == 0,\\n                \\\"Unrealised losses\\\"\\n            );\\n\\n            if (assetsToWithdraw == 0) return currentDebt;\\n\\n            uint256 preBalance = IERC20(vault.asset()).balanceOf(address(this));\\n            WithdrawFromStrategyLogic._withdrawFromStrategy(\\n                vault,\\n                strategy,\\n                assetsToWithdraw\\n            );\\n            uint256 postBalance = IERC20(vault.asset()).balanceOf(\\n                address(this)\\n            );\\n            uint256 withdrawn = Math.min(postBalance - preBalance, currentDebt);\\n\\n            if (withdrawn < assetsToWithdraw && maxLoss < Constants.MAX_BPS) {\\n                require(\\n                    (assetsToWithdraw - withdrawn) <=\\n                        (assetsToWithdraw * maxLoss) / Constants.MAX_BPS,\\n                    \\\"Too much loss\\\"\\n                );\\n            } else if (withdrawn > assetsToWithdraw) {\\n                assetsToWithdraw = withdrawn;\\n            }\\n\\n            vault.totalIdle += withdrawn;\\n            vault.totalDebt -= assetsToWithdraw;\\n            uint256 newDebt = currentDebt - assetsToWithdraw;\\n\\n            vault.strategies[strategy].currentDebt = newDebt;\\n            emit IVault.DebtUpdated(strategy, currentDebt, newDebt);\\n            return newDebt;\\n        } else {\\n            uint256 maxDebt = vault.strategies[strategy].maxDebt;\\n            uint256 newDebt = Math.min(targetDebt, maxDebt);\\n            if (newDebt <= currentDebt) return currentDebt;\\n\\n            uint256 _maxDeposit = IStrategy(strategy).maxDeposit(address(this));\\n            if (_maxDeposit == 0) return currentDebt;\\n\\n            uint256 assetsToDeposit = newDebt - currentDebt;\\n            assetsToDeposit = Math.min(assetsToDeposit, _maxDeposit);\\n            if (vault.totalIdle <= vault.minimumTotalIdle) return currentDebt;\\n            assetsToDeposit = Math.min(\\n                assetsToDeposit,\\n                vault.totalIdle - vault.minimumTotalIdle\\n            );\\n\\n            if (assetsToDeposit > 0) {\\n                address _asset = vault.asset();\\n                IERC20(_asset).approve(strategy, assetsToDeposit);\\n                uint256 preBalance = IERC20(_asset).balanceOf(address(this));\\n\\n                IStrategy(strategy).deposit(assetsToDeposit, address(this));\\n                uint256 postBalance = IERC20(_asset).balanceOf(address(this));\\n                IERC20(_asset).approve(strategy, 0);\\n                assetsToDeposit = preBalance - postBalance;\\n                vault.totalIdle -= assetsToDeposit;\\n                vault.totalDebt += assetsToDeposit;\\n            }\\n\\n            newDebt = currentDebt + assetsToDeposit;\\n            vault.strategies[strategy].currentDebt = newDebt;\\n            emit IVault.DebtUpdated(strategy, currentDebt, newDebt);\\n            return newDebt;\\n        }\\n    }\\n\\n    function buyDebt(\\n        DataTypes.VaultData storage vault,\\n        address strategy,\\n        uint256 amount\\n    ) public {\\n        require(vault.strategies[strategy].activation != 0, \\\"Not active\\\");\\n        uint256 currentDebt = vault.strategies[strategy].currentDebt;\\n        require(currentDebt > 0 && amount > 0, \\\"Nothing to buy\\\");\\n\\n        uint256 _amount = Math.min(amount, currentDebt);\\n        uint256 shares = (IStrategy(strategy).balanceOf(address(this)) *\\n            _amount) / currentDebt;\\n\\n        require(shares > 0, \\\"Cannot buy zero\\\");\\n        IERC20(vault.asset()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        vault.strategies[strategy].currentDebt -= _amount;\\n        vault.totalDebt -= _amount;\\n        vault.totalIdle += _amount;\\n        IERC20(strategy).safeTransfer(msg.sender, shares);\\n\\n        emit IVault.DebtUpdated(\\n            strategy,\\n            currentDebt,\\n            vault.strategies[strategy].currentDebt\\n        );\\n        emit IVault.DebtPurchased(strategy, _amount);\\n    }\\n\\n    function ExecuteUpdateMaxDebtForStrategy(\\n        DataTypes.VaultData storage vault,\\n        address strategy,\\n        uint256 newMaxDebt\\n    ) external {\\n        require(\\n            vault.strategies[strategy].activation != 0,\\n            \\\"Inactive strategy\\\"\\n        );\\n        vault.strategies[strategy].maxDebt = newMaxDebt;\\n        emit IVault.DebtUpdated(\\n            strategy,\\n            vault.strategies[strategy].currentDebt,\\n            newMaxDebt\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe1d2f37404584ae7adfca0cb477ba8a2828e8c874321af3140153d31164dec1f\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/DepositLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ERC4626Logic} from \\\"./ERC4626Logic.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\nimport {DebtLogic} from \\\"./DebtLogic.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\n\\nlibrary DepositLogic {\\n    using SafeERC20 for IERC20;\\n    using ERC4626Logic for DataTypes.VaultData;\\n    using ERC20Logic for DataTypes.VaultData;\\n    using DebtLogic for DataTypes.VaultData;\\n\\n    function executeDeposit(\\n        DataTypes.VaultData storage vault,\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) external {\\n        require(assets <= vault.maxDeposit(receiver), \\\"Exceed deposit limit\\\");\\n        require(shares > 0, \\\"Cannot mint zero\\\");\\n\\n        IERC20(vault.asset()).safeTransferFrom(\\n            caller,\\n            vault.addressVault,\\n            assets\\n        );\\n        vault.totalIdle += assets;\\n        vault._mint(receiver, shares);\\n\\n        if (vault.autoAllocate && vault.defaultQueue.length > 0) {\\n            vault.ExecuteUpdateDebt(\\n                vault.defaultQueue[0],\\n                type(uint256).max,\\n                0\\n            );\\n        }\\n\\n        emit IVault.Deposited(receiver, assets, shares);\\n    }\\n}\\n\",\"keccak256\":\"0x29f694c82601d19e32af107eb6ba451bfa03b355364beaa21445862bc92fcb21\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/ERC20Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nlibrary ERC20Logic {\\n    function asset(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (address) {\\n        return IVault(vaultData.addressVault).asset();\\n    }\\n\\n    function decimals(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (uint8) {\\n        return IVault(vaultData.addressVault).decimals();\\n    }\\n\\n    function totalAssets(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (uint256) {\\n        return IVault(vaultData.addressVault).totalAssets();\\n    }\\n\\n    function totalSupply(\\n        DataTypes.VaultData storage vaultData\\n    ) internal view returns (uint256) {\\n        return IVault(vaultData.addressVault).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        DataTypes.VaultData storage vaultData,\\n        address owner\\n    ) internal view returns (uint256) {\\n        return IERC20(vaultData.addressVault).balanceOf(owner);\\n    }\\n\\n    function _spendAllowance(\\n        DataTypes.VaultData storage vaultData,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        return\\n            IVault(vaultData.addressVault).spendAllowance(\\n                owner,\\n                spender,\\n                value\\n            );\\n    }\\n\\n    function _mint(\\n        DataTypes.VaultData storage vaultData,\\n        address receiver,\\n        uint256 assets\\n    ) internal {\\n        IVault(vaultData.addressVault).mint(receiver, assets);\\n    }\\n\\n    function _burn(\\n        DataTypes.VaultData storage vaultData,\\n        address receiver,\\n        uint256 assets\\n    ) internal {\\n        IVault(vaultData.addressVault).burn(receiver, assets);\\n    }\\n}\\n\",\"keccak256\":\"0x7683c382a2689f6a97dce3546bd8d5bf50409193e7ba54ff4b34cc1a962e063b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/ERC4626Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\nimport {IStrategy} from \\\"../../../interfaces/IStrategy.sol\\\";\\nimport {IDepositLimitModule} from \\\"../../../interfaces/IDepositLimitModule.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {ManagementFeeLogic} from \\\"./internal/ManagementFeeLogic.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\nimport {UnrealisedLossesLogic} from \\\"./internal/UnrealisedLossesLogic.sol\\\";\\nimport {IWithdrawLimitModule} from \\\"../../../interfaces/IWithdrawLimitModule.sol\\\";\\n\\nlibrary ERC4626Logic {\\n    using Math for uint256;\\n    using ERC20Logic for DataTypes.VaultData;\\n    using ERC4626Logic for DataTypes.VaultData;\\n\\n    function maxDeposit(\\n        DataTypes.VaultData storage vault,\\n        address receiver\\n    ) internal view returns (uint256) {\\n        if (receiver == address(0) || receiver == address(this)) return 0;\\n        if (vault.depositLimitModule != address(0)) {\\n            return\\n                IDepositLimitModule(vault.depositLimitModule)\\n                    .availableDepositLimit(receiver);\\n        }\\n        if (vault.depositLimit == type(uint256).max) return vault.depositLimit;\\n        uint256 totalAssets_ = vault.totalAssets();\\n        if (totalAssets_ >= vault.depositLimit) return 0;\\n        return vault.depositLimit - totalAssets_;\\n    }\\n\\n    function maxMint(\\n        DataTypes.VaultData storage vault,\\n        address receiver\\n    ) external view returns (uint256) {\\n        uint256 maxDepositAmount = vault.maxDeposit(receiver);\\n        return vault._convertToAssets(maxDepositAmount, Math.Rounding.Floor);\\n    }\\n\\n    function maxWithdraw(\\n        DataTypes.VaultData storage vault,\\n        address owner\\n    ) external view returns (uint256) {\\n        return vault._maxWithdraw(owner, 0, new address[](0));\\n    }\\n\\n    function maxWithdraw(\\n        DataTypes.VaultData storage vault,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory strategies\\n    ) external view returns (uint256) {\\n        return vault._maxWithdraw(owner, maxLoss, strategies);\\n    }\\n\\n    function maxRedeem(\\n        DataTypes.VaultData storage vault,\\n        address owner\\n    ) external view returns (uint256) {\\n        uint256 maxWithdrawAmount = vault._maxWithdraw(\\n            owner,\\n            0,\\n            new address[](0)\\n        );\\n        return vault._convertToShares(maxWithdrawAmount, Math.Rounding.Floor);\\n    }\\n\\n    function _maxWithdraw(\\n        DataTypes.VaultData storage vault,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) internal view returns (uint256) {\\n        require(maxLoss <= Constants.MAX_BPS, \\\"Invalid max loss\\\");\\n        uint256 maxAssets = vault._convertToAssets(\\n            vault.balanceOf(owner),\\n            Math.Rounding.Floor\\n        );\\n\\n        if (vault.withdrawLimitModule != address(0)) {\\n            return\\n                Math.min(\\n                    IWithdrawLimitModule(vault.withdrawLimitModule)\\n                        .availableWithdrawLimit(owner, maxLoss, _strategies),\\n                    maxAssets\\n                );\\n        }\\n\\n        if (maxAssets <= vault.totalIdle) return maxAssets;\\n        uint256 have = vault.totalIdle;\\n        uint256 loss = 0;\\n        address[] memory queue = vault.useDefaultQueue ||\\n            _strategies.length == 0\\n            ? vault.defaultQueue\\n            : _strategies;\\n\\n        for (uint256 i = 0; i < queue.length; i++) {\\n            address strategy = queue[i];\\n            require(\\n                vault.strategies[strategy].activation != 0,\\n                \\\"Inactive strategy\\\"\\n            );\\n\\n            uint256 currentDebt = vault.strategies[strategy].currentDebt;\\n\\n            uint256 toWithdraw = Math.min(maxAssets - have, currentDebt);\\n            if (toWithdraw == 0) continue;\\n\\n            uint256 unrealisedLoss = UnrealisedLossesLogic\\n                ._assessShareOfUnrealisedLosses(\\n                    strategy,\\n                    currentDebt,\\n                    toWithdraw\\n                );\\n\\n            uint256 strategyLimit = IStrategy(strategy).convertToAssets(\\n                IStrategy(strategy).maxRedeem(address(this))\\n            );\\n\\n            if (strategyLimit < toWithdraw - unrealisedLoss) {\\n                if (unrealisedLoss != 0) {\\n                    unrealisedLoss =\\n                        (unrealisedLoss * strategyLimit) /\\n                        (toWithdraw - unrealisedLoss);\\n                }\\n\\n                toWithdraw = strategyLimit + unrealisedLoss;\\n            }\\n\\n            if (unrealisedLoss > 0 && maxLoss < Constants.MAX_BPS) {\\n                if (\\n                    loss + unrealisedLoss >\\n                    ((have + toWithdraw) * maxLoss) / Constants.MAX_BPS\\n                ) break;\\n            }\\n            have += toWithdraw;\\n            loss += unrealisedLoss;\\n            if (have >= maxAssets) break;\\n        }\\n        return have;\\n    }\\n\\n    function previewDeposit(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return _convertToSharesWithFee(vault, assets, Math.Rounding.Floor);\\n    }\\n\\n    function previewMint(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return _convertToAssetsWithFee(vault, shares, Math.Rounding.Ceil);\\n    }\\n\\n    function previewWithdraw(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return _convertToSharesWithFee(vault, assets, Math.Rounding.Ceil);\\n    }\\n\\n    function previewRedeem(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return _convertToAssetsWithFee(vault, shares, Math.Rounding.Floor);\\n    }\\n\\n    function convertToAssets(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return vault._convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    function convertToAssets(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToAssets(shares, rounding);\\n    }\\n\\n    function convertToAssetsWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares\\n    ) external view returns (uint256) {\\n        return vault._convertToAssetsWithFee(shares, Math.Rounding.Floor);\\n    }\\n\\n    function convertToAssetsWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToAssetsWithFee(shares, rounding);\\n    }\\n\\n    function convertToShares(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return vault._convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    function convertToShares(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToShares(assets, rounding);\\n    }\\n\\n    function convertToSharesWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets\\n    ) external view returns (uint256) {\\n        return vault._convertToSharesWithFee(assets, Math.Rounding.Floor);\\n    }\\n\\n    function convertToSharesWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) external view returns (uint256) {\\n        return vault._convertToSharesWithFee(assets, rounding);\\n    }\\n\\n    function _convertToAssets(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (shares == type(uint256).max || shares == 0) {\\n            return shares;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return shares;\\n        }\\n        uint256 numerator = shares * totalAssets;\\n        uint256 amount = numerator / totalSupply;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalSupply != 0) {\\n            amount++;\\n        }\\n        return amount;\\n    }\\n\\n    function _convertToAssetsWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (shares == type(uint256).max || shares == 0) {\\n            return shares;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupplyWithFee();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return shares;\\n        }\\n        uint256 numerator = shares * totalAssets;\\n        uint256 amount = numerator / totalSupply;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalSupply != 0) {\\n            amount++;\\n        }\\n        return amount;\\n    }\\n\\n    function _convertToSharesWithFee(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (assets == type(uint256).max || assets == 0) {\\n            return assets;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupplyWithFee();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return assets;\\n        }\\n        uint256 numerator = assets * totalSupply;\\n        uint256 shares = numerator / totalAssets;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalAssets != 0) {\\n            shares++;\\n        }\\n        return shares;\\n    }\\n\\n    function _convertToShares(\\n        DataTypes.VaultData storage vault,\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (assets == type(uint256).max || assets == 0) {\\n            return assets;\\n        }\\n\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 totalAssets = vault.totalAssets();\\n\\n        if (totalSupply == 0) {\\n            return assets;\\n        }\\n        uint256 numerator = assets * totalSupply;\\n        uint256 shares = numerator / totalAssets;\\n        if (rounding == Math.Rounding.Ceil && numerator % totalAssets != 0) {\\n            shares++;\\n        }\\n        return shares;\\n    }\\n\\n    function pricePerShare(\\n        DataTypes.VaultData storage vault\\n    ) external view returns (uint256) {\\n        return\\n            vault._convertToAssets(10 ** vault.decimals(), Math.Rounding.Floor);\\n    }\\n\\n    function pricePerShareWithFee(\\n        DataTypes.VaultData storage vault\\n    ) external view returns (uint256) {\\n        return\\n            vault._convertToAssetsWithFee(\\n                10 ** vault.decimals(),\\n                Math.Rounding.Floor\\n            );\\n    }\\n\\n    function totalSupplyWithFee(\\n        DataTypes.VaultData storage vault\\n    ) internal view returns (uint256) {\\n        return\\n            vault.totalSupply() +\\n            ManagementFeeLogic.viewCalculateManagementFee(vault);\\n    }\\n}\\n\",\"keccak256\":\"0x07723061ddec99cf4c9ef2eca7245d6d5839eaa583ffff78c6a4cd63f4bac1be\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/InitializeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\n\\nlibrary InitializeLogic {\\n    using InitializeLogic for DataTypes.VaultData;\\n\\n    function ExecuteInitialize(\\n        DataTypes.VaultData storage vault,\\n        uint256 _profitMaxUnlockTime\\n    ) external {\\n        require(\\n            _profitMaxUnlockTime <= Constants.MAX_PROFIT_UNLOCK_TIME,\\n            \\\"Profit unlock time too long\\\"\\n        );\\n        vault.addressVault = address(this);\\n        vault.profitMaxUnlockTime = _profitMaxUnlockTime;\\n        vault.useDefaultQueue = true;\\n        vault.depositLimit = type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x4e2885ddfef8eaeda83ca1c0e009d52dc178860f0ea2b2c16756c9cec9e90ec0\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/UnlockSharesLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nlibrary UnlockSharesLogic {\\n    using ERC20Logic for DataTypes.VaultData;\\n\\n    function unlockShares(\\n        DataTypes.VaultData storage vault\\n    ) external view returns (uint256) {\\n        if (vault.fullProfitUnlockDate > block.timestamp) {\\n            return\\n                (vault.profitUnlockingRate *\\n                    (block.timestamp - vault.lastProfitUpdate)) /\\n                Constants.MAX_BPS_EXTENDED;\\n        } else {\\n            if (vault.fullProfitUnlockDate != 0) {\\n                return vault.balanceOf(vault.addressVault);\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe714855bbeb766d84d312687aac007d57dc1a6b2be79f548ce3697cd370db17\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/WithdrawLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {ERC20Logic} from \\\"./ERC20Logic.sol\\\";\\nimport {ERC4626Logic} from \\\"./ERC4626Logic.sol\\\";\\nimport {WithdrawFromStrategyLogic} from \\\"./internal/WithdrawFromStrategyLogic.sol\\\";\\nimport {UnrealisedLossesLogic} from \\\"./internal/UnrealisedLossesLogic.sol\\\";\\nimport {IWithdrawLimitModule} from \\\"../../../interfaces/IWithdrawLimitModule.sol\\\";\\nimport {IStrategy} from \\\"../../../interfaces/IStrategy.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\n\\nimport {ManagementFeeLogic} from \\\"./internal/ManagementFeeLogic.sol\\\";\\n\\nlibrary WithdrawLogic {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n    using ERC4626Logic for DataTypes.VaultData;\\n    using ERC20Logic for DataTypes.VaultData;\\n    using WithdrawFromStrategyLogic for DataTypes.VaultData;\\n\\n    function executeRedeem(\\n        DataTypes.VaultData storage vault,\\n        address sender,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) external returns (uint256) {\\n        return\\n            _redeem(\\n                vault,\\n                sender,\\n                receiver,\\n                owner,\\n                assets,\\n                shares,\\n                maxLoss,\\n                _strategies\\n            );\\n    }\\n\\n    function _redeem(\\n        DataTypes.VaultData storage vault,\\n        address sender,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) internal returns (uint256) {\\n        require(receiver != address(0), \\\"Zero address\\\");\\n        require(shares > 0, \\\"No shares to redeem\\\");\\n        require(assets > 0, \\\"No assets to redeem\\\");\\n        require(maxLoss <= Constants.MAX_BPS, \\\"Invalid max loss\\\");\\n\\n        if (vault.withdrawLimitModule != address(0)) {\\n            require(\\n                assets <=\\n                    IWithdrawLimitModule(vault.withdrawLimitModule)\\n                        .availableWithdrawLimit(owner, maxLoss, _strategies),\\n                \\\"Exceed withdraw limit\\\"\\n            );\\n        }\\n\\n        require(vault.balanceOf(owner) >= shares, \\\"Insufficient shares\\\");\\n\\n        if (sender != owner) {\\n            vault._spendAllowance(owner, sender, shares);\\n        }\\n\\n        uint256 requestedAssets = assets;\\n        uint256 currentTotalIdle = vault.totalIdle;\\n        address _asset = vault.asset();\\n\\n        if (requestedAssets > currentTotalIdle) {\\n            address[] memory queue = vault.useDefaultQueue ||\\n                _strategies.length == 0\\n                ? vault.defaultQueue\\n                : _strategies;\\n            uint256 currentTotalDebt = vault.totalDebt;\\n            uint256 assetsNeeded = requestedAssets - currentTotalIdle;\\n            uint256 assetsToWithdraw = 0;\\n            uint256 previousBalance = IERC20(_asset).balanceOf(address(this));\\n\\n            for (uint256 i = 0; i < queue.length; i++) {\\n                address strategy = queue[i];\\n                require(\\n                    vault.strategies[strategy].activation != 0,\\n                    \\\"Inactive strategy\\\"\\n                );\\n                uint256 currentDebt = vault.strategies[strategy].currentDebt;\\n                assetsToWithdraw = Math.min(assetsNeeded, currentDebt);\\n                uint256 maxWithdraw = IStrategy(strategy).convertToAssets(\\n                    IStrategy(strategy).maxRedeem(address(this))\\n                );\\n\\n                uint256 unrealisedLossesShare = UnrealisedLossesLogic\\n                    ._assessShareOfUnrealisedLosses(\\n                        strategy,\\n                        currentDebt,\\n                        assetsToWithdraw\\n                    );\\n                if (unrealisedLossesShare > 0) {\\n                    if (\\n                        maxWithdraw < assetsToWithdraw - unrealisedLossesShare\\n                    ) {\\n                        unrealisedLossesShare =\\n                            (unrealisedLossesShare * maxWithdraw) /\\n                            (assetsToWithdraw - unrealisedLossesShare);\\n                        assetsToWithdraw = maxWithdraw + unrealisedLossesShare;\\n                    }\\n                    assetsToWithdraw -= unrealisedLossesShare;\\n                    requestedAssets -= unrealisedLossesShare;\\n\\n                    assetsNeeded -= unrealisedLossesShare;\\n                    currentTotalDebt -= unrealisedLossesShare;\\n\\n                    if (maxWithdraw == 0 && unrealisedLossesShare > 0) {\\n                        vault.strategies[strategy].currentDebt =\\n                            currentDebt -\\n                            unrealisedLossesShare;\\n                        emit IVault.DebtUpdated(\\n                            strategy,\\n                            currentDebt,\\n                            vault.strategies[strategy].currentDebt\\n                        );\\n                    }\\n                }\\n                assetsToWithdraw = Math.min(assetsToWithdraw, maxWithdraw);\\n\\n                if (assetsToWithdraw == 0) continue;\\n\\n                vault._withdrawFromStrategy(strategy, assetsToWithdraw);\\n\\n                uint256 postBalance = IERC20(_asset).balanceOf(address(this));\\n                uint256 withdrawn = postBalance - previousBalance;\\n\\n                uint256 loss = 0;\\n\\n                if (withdrawn > assetsToWithdraw) {\\n                    if (withdrawn > currentDebt) {\\n                        assetsToWithdraw = currentDebt;\\n                    } else {\\n                        assetsToWithdraw += withdrawn - assetsToWithdraw;\\n                    }\\n                } else if (withdrawn < assetsToWithdraw) {\\n                    loss = assetsToWithdraw - withdrawn;\\n                }\\n\\n                currentTotalIdle += (assetsToWithdraw - loss);\\n                requestedAssets -= loss;\\n                currentTotalDebt -= assetsToWithdraw;\\n\\n                uint256 newDebt = currentDebt -\\n                    (assetsToWithdraw + unrealisedLossesShare);\\n                vault.strategies[strategy].currentDebt = newDebt;\\n                emit IVault.DebtUpdated(strategy, currentDebt, newDebt);\\n                if (requestedAssets <= currentTotalIdle) break;\\n                previousBalance = postBalance;\\n                assetsNeeded -= assetsToWithdraw;\\n            }\\n\\n            require(\\n                currentTotalIdle >= requestedAssets,\\n                \\\"Insufficient assets to withdraw\\\"\\n            );\\n            vault.totalDebt = currentTotalDebt;\\n        }\\n\\n        if (assets > requestedAssets && maxLoss < Constants.MAX_BPS) {\\n            require(\\n                assets - requestedAssets <=\\n                    (assets * maxLoss) / Constants.MAX_BPS,\\n                \\\"Too much loss\\\"\\n            );\\n        }\\n\\n        vault._burn(owner, shares);\\n        vault.totalIdle = currentTotalIdle - requestedAssets;\\n        IERC20(_asset).safeTransfer(receiver, requestedAssets);\\n\\n        emit IVault.Withdrawn(owner, shares, requestedAssets, 0);\\n        return requestedAssets;\\n    }\\n}\\n\",\"keccak256\":\"0x45c2d3927d1ab7541a0481c8414bebaa9fe3ee09ddaa4b6170508b07a9d0db29\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/internal/ManagementFeeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DataTypes} from \\\"../../types/DataTypes.sol\\\";\\nimport {Constants} from \\\"../../Constants.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IStrategy} from \\\"../../../../interfaces/IStrategy.sol\\\";\\n\\nimport {ERC20Logic} from \\\"../ERC20Logic.sol\\\";\\nimport {IVault} from \\\"../../../../interfaces/IVault.sol\\\";\\n\\nlibrary ManagementFeeLogic {\\n    using ERC20Logic for DataTypes.VaultData;\\n\\n    function caculateManagementFee(\\n        DataTypes.VaultData storage vault\\n    ) internal returns (uint256 feeShares) {\\n        feeShares = _calculateManagementFee(vault);\\n        if (vault.feeRecipient != address(0) && feeShares > 0) {\\n            vault._mint(vault.feeRecipient, feeShares);\\n        }\\n        vault.lastTimeTakeManagementFee = block.timestamp;\\n        emit IVault.ManagementFeeMinted(vault.feeRecipient, feeShares);\\n    }\\n\\n    function viewCalculateManagementFee(\\n        DataTypes.VaultData storage vault\\n    ) internal view returns (uint256) {\\n        return _calculateManagementFee(vault);\\n    }\\n\\n    function _calculateManagementFee(\\n        DataTypes.VaultData storage vault\\n    ) internal view returns (uint256 feeShares) {\\n        if (vault.feeRecipient == address(0)) return 0;\\n        uint256 totalSupply = vault.totalSupply();\\n        uint256 totalUserSupply = totalSupply -\\n            vault.balanceOf(vault.addressVault);\\n        feeShares =\\n            (totalUserSupply *\\n                (block.timestamp - vault.lastTimeTakeManagementFee) *\\n                vault.managementFee) /\\n            (Constants.YEAR * Constants.MAX_BPS);\\n    }\\n}\\n\",\"keccak256\":\"0xcf3504cb7a0bc2d012e4194686f1fc20216289d749c59f4b707d660fa11d5442\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/internal/UnrealisedLossesLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IStrategy} from \\\"../../../../interfaces/IStrategy.sol\\\";\\n\\nlibrary UnrealisedLossesLogic {\\n    function _assessShareOfUnrealisedLosses(\\n        address strategy,\\n        uint256 strategyCurrentDebt,\\n        uint256 assetsNeeded\\n    ) internal view returns (uint256) {\\n        uint256 vaultShares = IStrategy(strategy).balanceOf(address(this));\\n        uint256 strategyAssets = IStrategy(strategy).convertToAssets(\\n            vaultShares\\n        );\\n        if (strategyAssets >= strategyCurrentDebt || strategyCurrentDebt == 0)\\n            return 0;\\n\\n        uint256 numerator = assetsNeeded * strategyAssets;\\n        uint256 usersShareOfLoss = assetsNeeded -\\n            (numerator / strategyCurrentDebt);\\n        if (numerator % strategyCurrentDebt != 0) usersShareOfLoss += 1;\\n        return usersShareOfLoss;\\n    }\\n}\\n\",\"keccak256\":\"0x0ceacdb012d4eb19ed7db33ef2594b0343fae7c5c1d9e001187f8b7f6758b6e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/internal/WithdrawFromStrategyLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {DataTypes} from \\\"../../types/DataTypes.sol\\\";\\nimport {ERC20Logic} from \\\"../ERC20Logic.sol\\\";\\nimport {ERC4626Logic} from \\\"../ERC4626Logic.sol\\\";\\n\\nimport {IVault} from \\\"../../../../interfaces/IVault.sol\\\";\\nimport {IStrategy} from \\\"../../../../interfaces/IStrategy.sol\\\";\\n\\nlibrary WithdrawFromStrategyLogic {\\n    using SafeERC20 for IERC20;\\n    using ERC4626Logic for DataTypes.VaultData;\\n    using ERC20Logic for DataTypes.VaultData;\\n\\n    function _withdrawFromStrategy(\\n        DataTypes.VaultData storage vault,\\n        address strategy,\\n        uint256 assetsToWithdraw\\n    ) internal {\\n        uint256 sharesToRedeem = Math.min(\\n            IStrategy(strategy).previewWithdraw(assetsToWithdraw),\\n            IStrategy(strategy).balanceOf(address(this))\\n        );\\n        IStrategy(strategy).redeem(\\n            sharesToRedeem,\\n            address(this),\\n            address(this)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe8720f3db148c65b05b864ec6d10defadd177213469113577ad1bc873aa6e715\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary DataTypes {\\n    struct StrategyData {\\n        uint256 activation;\\n        uint256 lastReport;\\n        uint256 currentDebt;\\n        uint256 maxDebt;\\n    }\\n\\n    struct VaultData {\\n        address addressVault;\\n        uint256 totalDebt;\\n        uint256 totalIdle;\\n        // strategy\\n        mapping(address => StrategyData) strategies;\\n        address[] defaultQueue;\\n        bool useDefaultQueue;\\n        bool autoAllocate;\\n        // limit\\n        uint256 minimumTotalIdle;\\n        uint256 depositLimit;\\n        // profit unlocking\\n        uint256 profitMaxUnlockTime;\\n        uint256 fullProfitUnlockDate;\\n        uint256 profitUnlockingRate;\\n        uint256 lastProfitUpdate;\\n        // modules\\n        address accountant;\\n        address depositLimitModule;\\n        address withdrawLimitModule;\\n        // management fee\\n        address feeRecipient;\\n        uint256 managementFee;\\n        uint256 lastTimeTakeManagementFee;\\n    }\\n}\\n\",\"keccak256\":\"0x7d5bfe22b462e0690f2ba51aef13002fcf5b837e7a27a43bcfc44a2c42cd9403\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613da0908161001c8239f35b600080fdfe60a0604052600436101561001257600080fd5b6000803560e01c806301e1d11414612c4457806301ffc9a714612bed57806306fdde0314612b4c57806307a2d13a14612aea5780630835a3fc14612acc578063095ea7b314612a1b5780630a28a477146129885780630e26f3ec146128f757806316b87ac01461286b57806318160ddd1461285057806323b872dd1461282d578063248a9ca3146127f357806329f3cef51461272d5780632d772168146126b05780632f2ff15d14612665578063313ce5671461260457806336568abe146125bc57806338d52e0f1461257457806339ebf823146124d7578063402d267d146109f3578063405977e7146123e957806340c10f191461231b5780634492e2001461225857806348ea7127146121db5780634bbd71e91461210a5780634cdad506146120aa578063633f228c14611fa157806363d56c9a14611f3057806365cb676514611e0a5780636e54774214611cd35780636e553f6514611c4957806370a0823114611c03578063747b8a1c146113265780638212fd431461126b5780638aedaa6d1461123f57806391d14854146111e657806394bf804d1461114357806395d89b411461106257806399530b0614610fd45780639aa7df9414610fb65780639bbca88414610f455780639dc29fac14610e35578063a217fddf14610e19578063a9059cbb14610de7578063b3d7f6b914610dc8578063b460af9414610d15578063b6cc2d1f14610bf0578063ba08765214610ae4578063bb994d4814610a67578063bdc8144b146109f8578063c63d75b6146109f3578063c6e6f59214610993578063ce96cb7714610922578063cf206a7914610830578063d547741f146107e1578063d905777e14610731578063dd62ed3e146106e7578063dd8aaa4f146106c1578063df69b22a14610658578063e74b981b146105db578063edb45ffd1461056b578063ef8b30f714610544578063f6d7bfa014610422578063f7e47f781461039a578063fc7b9c181461037c5763fe56e232146102f357600080fd5b3461036b57602036600319011261036b5761030c6132ab565b8073a9DDb04e1d0B7a603cB7394C186d1529dc877FF4803b1561037957816044916040519283809263d0293cdf60e01b825284600483015260043560248301525af4801561036e5761035b5750f35b61036490612d56565b61036b5780f35b80fd5b6040513d84823e3d90fd5b50fd5b503461036b578060031936011261036b576020600154604051908152f35b503461036b57602036600319011261036b57806103b5612caf565b6103bd613197565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e57604051635a5994d360e11b8152600481018490526001600160a01b03909116602482015260016044820152908290829060649082905af4801561036e5761035b5750f35b5050fd5b503461036b57604036600319011261036b5761043c612caf565b9061044561385b565b3360009081527fba497e86a689750256daf086e2b8feba953def9b723a3f9e563274cc492e774960205260409020547fb5635f8fcf25e4801550a062d4397a74f631be84ea8b1cff4a86e831f5c203dc929060ff16156105255781907365aFcbBB35cb76E21095873783272793d5Fd00B790813b1561041e578290606460405180948193633c4c444160e01b835285600484015260018060a01b0316602483015260243560448301525af4801561036e57610511575b506001600080516020613d2b8339815191525580f35b61051a90612d56565b61036b5780826104fb565b60405163e2517d3f60e01b815233600482015260248101849052604490fd5b503461036b57602036600319011261036b5760206105636004356130f2565b604051908152f35b503461036b57602036600319011261036b57610585613197565b8073a9DDb04e1d0B7a603cB7394C186d1529dc877FF4803b156103795781606491604051928380926306e5b7e760e21b82528460048301526004356024830152600160448301525af4801561036e5761035b5750f35b503461036b57602036600319011261036b57806105f6612caf565b6105fe6132ab565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e576040516342320d6160e11b8152600481018490526001600160a01b039091166024820152908290829060449082905af4801561036e5761035b5750f35b503461036b57602036600319011261036b576106726132ab565b8073a9DDb04e1d0B7a603cB7394C186d1529dc877FF4803b15610379578160449160405192838092631a5db58960e21b825284600483015260043560248301525af4801561036e5761035b5750f35b503461036b576106e46106d336612cef565b916106df303314612fac565b613328565b80f35b503461036b57604036600319011261036b57610701612caf565b61071261070c612cc5565b91612f73565b9060018060a01b03166000526020526020604060002054604051908152f35b503461036b576020908160031936011261036b5761074d612caf565b604051634b2ec7c960e01b8152600481018390526001600160a01b0390911660248201528281604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d557916107a3575b50604051908152f35b90508181813d83116107ce575b6107ba8183612d9f565b810103126107c957513861079a565b600080fd5b503d6107b0565b604051903d90823e3d90fd5b503461036b57604036600319011261036b5761082c600435610801612cc5565b90808452600080516020613ceb83398151915260205261082760016040862001546132f5565b6136df565b5080f35b503461036b578060031936011261036b5760018060a01b0380915416906001549060025490600554600654600754600854600954600a5491600b549387600c54169560ff89600d5416988a600e54169a600f54169b6010549d6011549f60405160805260805152602060805101526040608051015281811615156060608051015260081c16151560808051015260a0608051015260c0608051015260e06080510152610100608051015261012060805101526101406080510152610160608051015261018060805101526101a060805101526101c060805101526101e060805101526102006080510152610220608051f35b503461036b576020908160031936011261036b5761093e612caf565b6040516333fefd2b60e21b8152600481018390526001600160a01b0390911660248201528281604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d557916107a35750604051908152f35b503461036b576020908160031936011261036b576040516313567f2960e01b815260048082018390523560248201528281604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d557916107a35750604051908152f35b612d24565b503461036b57602036600319011261036b57610a12613197565b8073a9DDb04e1d0B7a603cB7394C186d1529dc877FF4803b156103795781606491604051928380926306e5b7e760e21b825284600483015260043560248301528460448301525af4801561036e5761035b5750f35b503461036b57602036600319011261036b5780610a82612caf565b610a8a61313b565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e578290606460405180948193634dcf1cf760e11b835285600484015260018060a01b031660248301528460448301525af4801561036e5761035b5750f35b503461036b57610af336612e22565b610afe93929361388b565b506040519163b3fc5db960e01b835260006004840152846024840152600060448401526020948584606481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af4938415610be55790869392918695610bb1575b50604051610b8391610b6482612d84565b87825260405163ed607eef60e01b8152968795869533600488016130a3565b038173Cd251d1Cb60D5b1Fdc315b3282b66C3A8CdaAaFC5af49182156107d557916107a35750604051908152f35b8481959296503d8311610bde575b610bc98183612d9f565b810103126107c957610b838693519490610b53565b503d610bbf565b6040513d87823e3d90fd5b503461036b57602036600319011261036b57610c0a612caf565b610c1261385b565b3360009081527fa3f49cd9abc069fadad1b5960d4e73636b82c5d06bb74023c9881d605e88b70260205260409020547fb88f06de7a467621d4739d66b596fe556082f25ab13291a5e3412ebfe6a282c79060ff1615610cf7575060408051630ab19c7560e01b8152600481018490526001600160a01b039092166024830152816044817365aFcbBB35cb76E21095873783272793d5Fd00B75af4801561036e57610ccc57506001600080516020613d2b8339815191525580f35b604090813d8311610cf0575b610ce28183612d9f565b8101031261036b57386104fb565b503d610cd8565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b503461036b57610d2436612e22565b610d309392919361388b565b50604051633413a49160e11b8152600060048201526024810183905260016044820152602094908581606481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af4908115610be55790869392918691610d965750604051610b8391610b6482612d84565b84819592503d8311610dc1575b610dad8183612d9f565b810103126107c957610b8386935190610b53565b503d610da3565b503461036b57602036600319011261036b57602061056360043561302b565b503461036b57604036600319011261036b57610e0e610e04612caf565b60243590336133fe565b602060405160018152f35b503461036b578060031936011261036b57602090604051908152f35b503461036b57604036600319011261036b57610e4f612caf565b90602435610e5e303314612fac565b6001600160a01b038316908115610f2c5781600052600080516020613c8b8339815191528060205260406000205494828610610efb5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926000959660209386885284520360408620557f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02818154039055604051908152a380f35b60405163391434e360e21b81526001600160a01b039190911660048201526024810186905260448101839052606490fd5b604051634b637e8f60e11b815260048101849052602490fd5b503461036b57602036600319011261036b5780610f60612d47565b610f6861324f565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e578290604460405180948193639425dfc760e01b8352856004840152151560248301525af4801561036e5761035b5750f35b503461036b578060031936011261036b576020600254604051908152f35b503461036b578060031936011261036b57604051631f387e1d60e21b81526004810182905290602082602481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49081156107d5579061102f575b602090604051908152f35b506020813d60201161105a575b8161104960209383612d9f565b810103126107c95760209051611024565b3d915061103c565b503461036b578060031936011261036b576040519080600080516020613cab833981519152805461109281612e7a565b8086529260209260019280841690811561111457506001146110cf575b6110cb876110bf81890382612d9f565b60405191829182612c66565b0390f35b81529350600080516020613d0b8339815191525b838510611101575050505081016020016110bf826110cb38806110af565b80548686018401529382019381016110e3565b9150508695506110cb969350602092506110bf94915060ff191682840152151560051b820101929338806110af565b503461036b57604036600319011261036b57600435611160612cc5565b61116861385b565b61117061388b565b5061117a81613762565b8083116111b357506111998261119160209461302b565b809333613af0565b6001600080516020613d2b83398151915255604051908152f35b60405163284ff66760e01b81526001600160a01b0392909216600483015260248201929092526044810191909152606490fd5b503461036b57604036600319011261036b576040611202612cc5565b916004358152600080516020613ceb833981519152602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b503461036b578060031936011261036b57602061056361125d612ec1565b6112656139cf565b90612e57565b503461036b57602036600319011261036b573360009081527ffaadd6a40a37543b0ddfe1e3f3f266e11072592917e21d6a890803d0d7d6f75b60205260409020547f56df694eb35c748e42e9628d52ed28575d4046c5cb4ba53578a35cacecaaf9f99060ff1615610cf757508073a9DDb04e1d0B7a603cB7394C186d1529dc877FF4803b156103795781604491604051928380926307d4432d60e51b825284600483015260043560248301525af4801561036e5761035b5750f35b503461036b5760a036600319011261036b576001600160a01b0390600435808316900361036b576024356001600160401b0381116119475761136c903690600401612ddb565b6044356001600160401b038111611bff5761138b903690600401612ddb565b928060843516608435036107c957600080516020613d4b83398151915254916001600160401b03831680159081611bef575b6001149081611be5575b159081611bdc575b50611bca5760016001600160401b0319841617600080516020613d4b8339815191525560ff8360401c1615611b9d575b611407613b67565b61140f613b67565b8051906001600160401b038211611b8957819061143a600080516020613c6b83398151915254612e7a565b601f8111611b0a575b50602090601f8311600114611a7f578692611a74575b50508160011b916000199060031b1c191617600080516020613c6b833981519152555b83516001600160401b038111611a60576114a4600080516020613cab83398151915254612e7a565b601f81116119e8575b50602094601f821160011461195e579484958293949592611953575b50508160011b916000199060031b1c191617600080516020613cab833981519152555b6114f4613b67565b6114fc613b67565b611507600435613b96565b901561194b575b7f0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e0091825490600435169160ff60a01b9060a01b16906affffffffffffffffffffff60a81b161717905561155f613b67565b611567613b67565b6001600080516020613d2b83398151915255611581613b67565b81735e84c9B1303d2AD196cc0ce29002dd3524F5AFF4803b15611947578160449160405192838092632397c4e160e21b825284600483015260643560248301525af4801561036e57611933575b505060ff906115de6084356134ec565b506115ea60843561359c565b50600080516020613ccb83398151915280600052600080516020613ceb83398151915280602052816001604060002001918183549355817fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff938185600080a4817faa5d998d0c4b42510868f0d0e7c0a96373abb1abcf4dacce3cd68c32dfecf1e580600052600160406000200190828254925585600080a4817fbc6b16c313697c03242487da72beb3e512a6f0f23d77bbc347355f0e763f334d80600052600160406000200190828254925585600080a46116c3613940565b6116cb613940565b7fb88f06de7a467621d4739d66b596fe556082f25ab13291a5e3412ebfe6a282c79081600052602052600160406000200190828254925583600080a4817f4087820ac4f3f365dd6666f75a18a95ae63ded871b765505dc50ff63b8b8ad7a80600052600160406000200190828254925583600080a4817fb5635f8fcf25e4801550a062d4397a74f631be84ea8b1cff4a86e831f5c203dc80600052600160406000200190828254925583600080a4817f887f610dcfd5fcb5c1f7698dc3962d3f7c9e3ac366693c640c2cb4541798cce580600052600160406000200190828254925583600080a4817f0e5c3557c557b929246c71f8bdd2b8d41adac718fe1473b2c5260a78b189cd5180600052600160406000200190828254925583600080a4817f56df694eb35c748e42e9628d52ed28575d4046c5cb4ba53578a35cacecaaf9f980600052600160406000200190828254925583600080a4817f8ec1c37cf64b8ee6251b9f56a2381f08fce59092560623126b6f8aa4843227fb80600052600160406000200190828254925583600080a4817fd8ff363222baefa421b7eedd5f7f531b7be1f7001edc7ee4ad694cde369f31ee80600052600160406000200190828254925583600080a47fd40d5b35459acbc45a4f502ed75abb26933ccc9216a51d40c846481a5274c68a806000526001604060002001918383549355600080a460401c16156118d95780f35b68ff000000000000000019600080516020613d4b8339815191525416600080516020613d4b833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b61193c90612d56565b6119475781386115ce565b5080fd5b50601261150e565b0151905038806114c9565b600080516020613cab8339815191528552601f19821695600080516020613d0b83398151915291865b8881106119d0575083600195969798106119b7575b505050811b01600080516020613cab833981519152556114ec565b015160001960f88460031b161c1916905538808061199c565b91926020600181928685015181550194019201611987565b600080516020613cab8339815191528552601f820160051c600080516020613d0b833981519152019060208310611a4a575b601f0160051c600080516020613d0b83398151915201905b818110611a3f57506114ad565b858155600101611a32565b600080516020613d0b8339815191529150611a1a565b634e487b7160e01b84526041600452602484fd5b015190503880611459565b600080516020613c6b8339815191528752600080516020613c4b8339815191529250601f198416875b818110611af25750908460019594939210611ad9575b505050811b01600080516020613c6b8339815191525561147c565b015160001960f88460031b161c19169055388080611abe565b92936020600181928786015181550195019301611aa8565b909150600080516020613c6b8339815191528652601f830160051c600080516020613c4b8339815191520160208410611b74575b908392915b601f820160051c600080516020613c4b833981519152018110611b665750611443565b878155849350600101611b43565b50600080516020613c4b833981519152611b3e565b634e487b7160e01b85526041600452602485fd5b68ffffffffffffffffff1983166801000000000000000117600080516020613d4b833981519152556113ff565b60405163f92ee8a960e01b8152600490fd5b905015386113cf565b303b1591506113c7565b604085901c60ff161591506113bd565b8280fd5b503461036b57602036600319011261036b576020906040906001600160a01b03611c2b612caf565b168152600080516020613c8b83398151915283522054604051908152f35b503461036b57604036600319011261036b57600435611c66612cc5565b611c6e61385b565b611c7661388b565b50611c8081613762565b808311611ca05760208361119984611c97836130f2565b92839133613af0565b604051633c8097d960e11b81526001600160a01b0392909216600483015260248201929092526044810191909152606490fd5b503461036b57604036600319011261036b57611ced612caf565b906024358015158091036107c957611d0361385b565b3360009081527f0517aee78b9180436652dcfb6f20d72f8a241b9231fc7941f9cee74f4b6480d360205260409020547faa5d998d0c4b42510868f0d0e7c0a96373abb1abcf4dacce3cd68c32dfecf1e5939060ff1615611deb5782935073a9DDb04e1d0B7a603cB7394C186d1529dc877FF491823b15611de65760405163ce4c748160e01b8152600481018590526001600160a01b0390921660248301526044820152908290829060649082905af4801561036e57611dd257506001600080516020613d2b8339815191525580f35b611ddb90612d56565b61036b5780386104fb565b505050fd5b60405163e2517d3f60e01b815233600482015260248101859052604490fd5b503461036b57606036600319011261036b57611e24612caf565b90604435906001600160401b038083116119475736602384011215611947578260040135908111611f1a578060051b9360209460405192611e6787830185612d9f565b835260248684019186010194368611611f16579060248794939201905b868210611eff575050611ed1939450604051938492839263233d87e760e01b845287600485015260018060a01b031660248401526024356044840152608060648401526084830190612fee565b0381739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d557916107a35750604051908152f35b848091611f0b84612cdb565b815201910190611e84565b8480fd5b634e487b7160e01b600052604160045260246000fd5b503461036b57602036600319011261036b5780611f4b612d47565b611f536131f3565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e57829060446040518094819363de9f508b60e01b8352856004840152151560248301525af4801561036e5761035b5750f35b503461036b57602090602060031936011261036b57600435916001600160401b03808411611bff5736602385011215611bff578360040135908111611bff573660248260051b86010111611bff57611ff761385b565b611fff61324f565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b156120a657919360405192637d35a6e560e11b845280604485018660048701526040602487015252602460648501920195855b82811061207d578680878181808903818b5af4801561036e5761051157506001600080516020613d2b8339815191525580f35b9091928280600192838060a01b036120948c612cdb565b1681520198019101969291909661204a565b8380fd5b503461036b576020908160031936011261036b57604051630c2424d960e31b815260048082018390523560248201528281604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d557916107a35750604051908152f35b503461036b57602036600319011261036b57612124612caf565b3360009081527f4166860bad6fb293cdffa9a9ce4c05d6e5359c7e9205745eae341f3036af237a60205260409020547f0e5c3557c557b929246c71f8bdd2b8d41adac718fe1473b2c5260a78b189cd5192919060ff161561052557819073a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e57604051632248a0d360e21b8152600481018490526001600160a01b039091166024820152908290829060449082905af4801561036e5761035b5750f35b503461036b57602036600319011261036b57806121f6612caf565b6121fe61324f565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e5760405163d55d582b60e01b8152600481018490526001600160a01b039091166024820152908290829060449082905af4801561036e5761035b5750f35b503461036b57606036600319011261036b57612272612caf565b61227a61385b565b6122826131f3565b60405190638dd618f560e01b825282600483015260018060a01b03166024820152602435604482015260443560648201526020816084817365aFcbBB35cb76E21095873783272793d5Fd00B75af4801561036e576122f057506001600080516020613d2b8339815191525580f35b602090813d8311612314575b6123068183612d9f565b810103126107c957386104fb565b503d6122fc565b503461036b57604036600319011261036b57612335612caf565b60243590612344303314612fac565b6001600160a01b03169081156123d0577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000927f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace026123a6828254612e57565b9055848452600080516020613c8b833981519152825260408420818154019055604051908152a380f35b60405163ec442f0560e01b815260048101849052602490fd5b503461036b57604036600319011261036b57612403612caf565b9061240c61385b565b3360009081527ff495fdbfca8d2976096e9633d5792e8da7dcb1810952a4535dbeac0d0254195860205260409020547fd8ff363222baefa421b7eedd5f7f531b7be1f7001edc7ee4ad694cde369f31ee929060ff16156105255781907365aFcbBB35cb76E21095873783272793d5Fd00B790813b1561041e578290606460405180948193632dd9caaf60e11b835285600484015260018060a01b0316602483015260243560448301525af4801561036e5761051157506001600080516020613d2b8339815191525580f35b503461036b57602036600319011261036b5760406080916124f6612caf565b816060845161250481612d69565b8281528260208201528286820152015260018060a01b0316815260036020522060405161253081612d69565b815491828252600181015460208301908152606060036002840154936040860194855201549301928352604051938452516020840152516040830152516060820152f35b503461036b578060031936011261036b577f0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e00546040516001600160a01b039091168152602090f35b503461036b57604036600319011261036b576125d6612cc5565b336001600160a01b038216036125f25761082c906004356136df565b60405163334bd91960e11b8152600490fd5b503461036b578060031936011261036b5760ff7f0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e005460a01c169060ff821161265157602082604051908152f35b634e487b7160e01b81526011600452602490fd5b503461036b57604036600319011261036b5761082c600435612685612cc5565b90808452600080516020613ceb8339815191526020526126ab60016040862001546132f5565b613658565b503461036b57602036600319011261036b57806126cb612caf565b6126d3613197565b73a9DDb04e1d0B7a603cB7394C186d1529dc877FF490813b1561041e578290606460405180948193635a5994d360e11b835285600484015260018060a01b031660248301528460448301525af4801561036e5761035b5750f35b503461036b578060031936011261036b5760405180916004549081835260208093018092600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90835b8181106127d6575050508461278f910385612d9f565b60405193838594850191818652518092526040850193925b8281106127b657505050500390f35b83516001600160a01b0316855286955093810193928101926001016127a7565b82546001600160a01b031684529286019260019283019201612779565b503461036b57602036600319011261036b57600160406020926004358152600080516020613ceb8339815191528452200154604051908152f35b503461036b57610e0e61283f36612cef565b9161284b833383613328565b6133fe565b503461036b578060031936011261036b576020610563612ec1565b503461036b57602036600319011261036b57612885612caf565b61288d61313b565b8173a9DDb04e1d0B7a603cB7394C186d1529dc877FF491823b1561194757604051634dcf1cf760e11b8152600481018390526001600160a01b0390911660248201526001604482015291829060649082905af4801561036e576128ee575080f35b6106e490612d56565b503461036b578060031936011261036b576040516310e005b160e01b815260048101829052602081602481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af490811561036e578291612952575b602082604051908152f35b90506020813d602011612980575b8161296d60209383612d9f565b8101031261194757602091505138612947565b3d9150612960565b503461036b576020908160031936011261036b576040516361af063360e11b815260048082018390523560248201528281604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d55780926129eb575b5050604051908152f35b9091508282813d8311612a14575b612a038183612d9f565b8101031261036b57505138806129e1565b503d6129f9565b503461036b57604036600319011261036b57612a35612caf565b602435903315612ab3576001600160a01b0316918215612a9b5760408291612a5c33612f73565b85825260205220556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60249060405190634a1406b160e11b82526004820152fd5b60405163e602df0560e01b815260048101849052602490fd5b503461036b578060031936011261036b576020600654604051908152f35b503461036b576020908160031936011261036b576040516310968a0560e01b815260048082018390523560248201528281604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af49182156107d55780926129eb575050604051908152f35b503461036b578060031936011261036b576040519080600080516020613c6b8339815191528054612b7c81612e7a565b808652926020926001928084169081156111145750600114612ba8576110cb876110bf81890382612d9f565b81529350600080516020613c4b8339815191525b838510612bda575050505081016020016110bf826110cb38806110af565b8054868601840152938201938101612bbc565b503461036b57602036600319011261036b5760043563ffffffff60e01b811680910361194757602090637965db0b60e01b8114908115612c33575b506040519015158152f35b6301ffc9a760e01b14905082612c28565b503461036b578060031936011261036b57602061056360025460015490612e57565b6020808252825181830181905290939260005b828110612c9b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501612c79565b600435906001600160a01b03821682036107c957565b602435906001600160a01b03821682036107c957565b35906001600160a01b03821682036107c957565b60609060031901126107c9576001600160a01b039060043582811681036107c9579160243590811681036107c9579060443590565b346107c95760203660031901126107c9576020610563612d42612caf565b613762565b6004359081151582036107c957565b6001600160401b038111611f1a57604052565b608081019081106001600160401b03821117611f1a57604052565b602081019081106001600160401b03821117611f1a57604052565b90601f801991011681019081106001600160401b03821117611f1a57604052565b6001600160401b038111611f1a57601f01601f191660200190565b81601f820112156107c957803590612df282612dc0565b92612e006040519485612d9f565b828452602083830101116107c957816000926020809301838601378301015290565b60609060031901126107c957600435906001600160a01b039060243582811681036107c9579160443590811681036107c95790565b91908201809211612e6457565b634e487b7160e01b600052601160045260246000fd5b90600182811c92168015612eaa575b6020831014612e9457565b634e487b7160e01b600052602260045260246000fd5b91607f1691612e89565b91908203918211612e6457565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254604051639a17075960e01b8152600060048201529060208260248173185807a05a5A0eF5c31516cdA68422B98f6147E85af4908115612f6757600091612f31575b612f2e9250612eb4565b90565b90506020823d602011612f5f575b81612f4c60209383612d9f565b810103126107c957612f2e915190612f24565b3d9150612f3f565b6040513d6000823e3d90fd5b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b15612fb357565b60405162461bcd60e51b815260206004820152601360248201527213db9b1e481d985d5b1d0818d85b881b5a5b9d606a1b6044820152606490fd5b90815180825260208080930193019160005b82811061300e575050505090565b83516001600160a01b031685529381019392810192600101613000565b60405190630d25bbb560e01b8252600060048301526024820152602081604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af4908115612f6757600091613074575090565b90506020813d60201161309b575b8161308f60209383612d9f565b810103126107c9575190565b3d9150613082565b60008082526001600160a01b039283166020830152928216604082015292166060830152608082019290925260a081019290925260c082015261010060e08201819052612f2e92910190612fee565b6040519063665c96db60e11b8252600060048301526024820152602081604481739EE10f63449f2DD3CeE511CcCf67C881F73D3fb65af4908115612f6757600091613074575090565b3360009081527f10d70e3a3777c025b5e9ce76933ad9e855317d269f27e1a4bc94e9698e3f665860205260409020547fbc6b16c313697c03242487da72beb3e512a6f0f23d77bbc347355f0e763f334d9060ff1615610cf75750565b3360009081527f6c0c2d1d14bc83a2216e58daf9a0cd7e298111de4a5b7b16aa980076b0f85ff960205260409020547f887f610dcfd5fcb5c1f7698dc3962d3f7c9e3ac366693c640c2cb4541798cce59060ff1615610cf75750565b3360009081527fadcc9e5138e1babd8d9829f890e27ec44d4e252c58e34ce3fa129c741d13373460205260409020547f4087820ac4f3f365dd6666f75a18a95ae63ded871b765505dc50ff63b8b8ad7a9060ff1615610cf75750565b3360009081527f9a4cd071f2ff548e185a4af9a22df0932b4f41be60048045cf84c207ed3d583860205260409020547f6ba016d3b65b86283908b0fb3b490838033bbcf01b3aebc405616e0c981d00739060ff1615610cf75750565b3360009081527f4a9c097c866513af3cc7dc827c0f6d0047b0afe5503d41e27ed9ad22b37874cd6020526040902054600080516020613ccb8339815191529060ff1615610cf75750565b80600052600080516020613ceb83398151915260205260406000203360005260205260ff6040600020541615610cf75750565b919061333383612f73565b9260018060a01b0390818316916000958387526020526040862054936000198510613362575b50505050505050565b8585106133cd57508116156133b457811561339b57906133856040949392612f73565b9085526020520391205538808080808080613359565b604051634a1406b160e11b815260048101869052602490fd5b60405163e602df0560e01b815260048101869052602490fd5b604051637dc7a0d960e11b81526001600160a01b039190911660048201526024810185905260448101869052606490fd5b916001600160a01b038084169283156134d357169283156134ba57600090838252600080516020613c8b83398151915280602052604083205491848310613487575082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef959360409388602097528652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b0391909116600482015260248101929092525060448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6001600160a01b031660008181527f4a9c097c866513af3cc7dc827c0f6d0047b0afe5503d41e27ed9ad22b37874cd6020526040812054909190600080516020613ccb83398151915290600080516020613ceb8339815191529060ff16613596578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b6001600160a01b031660008181527f0517aee78b9180436652dcfb6f20d72f8a241b9231fc7941f9cee74f4b6480d360205260408120549091907faa5d998d0c4b42510868f0d0e7c0a96373abb1abcf4dacce3cd68c32dfecf1e590600080516020613ceb8339815191529060ff16613596578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90600091808352600080516020613ceb83398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014613596578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90600091808352600080516020613ceb83398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461359657818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160a01b0390811680158015613852575b61384b5781600d5416908161381a5750506007546000198114613815576004906020600093845416604051938480926278744560e21b82525afa91821561380a5783926137d6575b50808210156137d157612f2e9250612eb4565b505090565b9091506020813d602011613802575b816137f260209383612d9f565b81010312611bff575190386137be565b3d91506137e5565b6040513d85823e3d90fd5b905090565b6020919250602460405180948193632355178960e11b835260048301525afa908115612f6757600091613074575090565b5050600090565b50308114613776565b600080516020613d2b83398151915260028154146138795760029055565b604051633ee5aeb560e01b8152600490fd5b6138936139cf565b600f549091906001600160a01b0390811680151580613937575b6138e7575b5042601155600f54167f9b667543ac195d809e34c85813d76b4738f9e454b9334d6db8d7f035702e47a26020604051858152a2565b6000908282541690813b15611bff5782916044839260405195869384926340c10f1960e01b845260048401528a60248401525af19081156107d55750156138b25761393190612d56565b386138b2565b508315156138ad565b7f6ba016d3b65b86283908b0fb3b490838033bbcf01b3aebc405616e0c981d007380600052600080516020613ceb833981519152602052600160406000200190815490600080516020613ccb8339815191528093557fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff600080a4565b81810292918115918404141715612e6457565b600f546001600160a01b0390811615613aea57600080546040516318160ddd60e01b81529260209291168284600481845afa93841561036e578294613abb575b509082602492604051938480926370a0823160e01b82528060048301525afa928315613aae578193613a74575b505050613a67613a55613a709264496cebb80094612eb4565b613a6160115442612eb4565b906139bc565b601054906139bc565b0490565b9091809350813d8311613aa7575b613a8c8183612d9f565b8101031261036b575051613a67613a5564496cebb800613a3c565b503d613a82565b50604051903d90823e3d90fd5b9093508281813d8311613ae3575b613ad38183612d9f565b8101031261194757519282613a0f565b503d613ac9565b50600090565b90919273c909a83daAD0bd4cB47AB718f494A86F3d2c66B492833b156107c95760009360a492604051968795869463084a7e7960e31b865288600487015260018060a01b038092166024870152166044850152606484015260848301525af48015612f6757613b5c5750565b613b6590612d56565b565b60ff600080516020613d4b8339815191525460401c1615613b8457565b604051631afcd79f60e31b8152600490fd5b90604051602081019063313ce56760e01b825260048152604081018181106001600160401b03821117611f1a576040525160009384928392916001600160a01b03165afa3d15613c42573d90613beb82612dc0565b91613bf96040519384612d9f565b82523d84602084013e5b80613c36575b613c13575b508190565b602081805181010312611bff576020015160ff8111613c0e576001925060ff1690565b50602081511015613c09565b606090613c0356fe2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace049bd4dbbde3e8c2a4c422fc593b5df31e3960da9ec402b66c87a010d0623ab46c02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680046a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a2646970667358221220244d9740100ce671cedabd1a6220df120160ed46109dba33e38b0f15f4e68c4564736f6c63430008180033",
  "deployedBytecode": "0x60a0604052600436101561001257600080fd5b6000803560e01c806301e1d11414612c4457806301ffc9a714612bed57806306fdde0314612b4c57806307a2d13a14612aea5780630835a3fc14612acc578063095ea7b314612a1b5780630a28a477146129885780630e26f3ec146128f757806316b87ac01461286b57806318160ddd1461285057806323b872dd1461282d578063248a9ca3146127f357806329f3cef51461272d5780632d772168146126b05780632f2ff15d14612665578063313ce5671461260457806336568abe146125bc57806338d52e0f1461257457806339ebf823146124d7578063402d267d146109f3578063405977e7146123e957806340c10f191461231b5780634492e2001461225857806348ea7127146121db5780634bbd71e91461210a5780634cdad506146120aa578063633f228c14611fa157806363d56c9a14611f3057806365cb676514611e0a5780636e54774214611cd35780636e553f6514611c4957806370a0823114611c03578063747b8a1c146113265780638212fd431461126b5780638aedaa6d1461123f57806391d14854146111e657806394bf804d1461114357806395d89b411461106257806399530b0614610fd45780639aa7df9414610fb65780639bbca88414610f455780639dc29fac14610e35578063a217fddf14610e19578063a9059cbb14610de7578063b3d7f6b914610dc8578063b460af9414610d15578063b6cc2d1f14610bf0578063ba08765214610ae4578063bb994d4814610a67578063bdc8144b146109f8578063c63d75b6146109f3578063c6e6f59214610993578063ce96cb7714610922578063cf206a7914610830578063d547741f146107e1578063d905777e14610731578063dd62ed3e146106e7578063dd8aaa4f146106c1578063df69b22a14610658578063e74b981b146105db578063edb45ffd1461056b578063ef8b30f714610544578063f6d7bfa014610422578063f7e47f781461039a578063fc7b9c181461037c5763fe56e232146102f357600080fd5b3461036b57602036600319011261036b5761030c6132ab565b8073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__803b1561037957816044916040519283809263d0293cdf60e01b825284600483015260043560248301525af4801561036e5761035b5750f35b61036490612d56565b61036b5780f35b80fd5b6040513d84823e3d90fd5b50fd5b503461036b578060031936011261036b576020600154604051908152f35b503461036b57602036600319011261036b57806103b5612caf565b6103bd613197565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e57604051635a5994d360e11b8152600481018490526001600160a01b03909116602482015260016044820152908290829060649082905af4801561036e5761035b5750f35b5050fd5b503461036b57604036600319011261036b5761043c612caf565b9061044561385b565b3360009081527fba497e86a689750256daf086e2b8feba953def9b723a3f9e563274cc492e774960205260409020547fb5635f8fcf25e4801550a062d4397a74f631be84ea8b1cff4a86e831f5c203dc929060ff161561052557819073__$792584d84f72d9431342ae3d286007221a$__90813b1561041e578290606460405180948193633c4c444160e01b835285600484015260018060a01b0316602483015260243560448301525af4801561036e57610511575b506001600080516020613d2b8339815191525580f35b61051a90612d56565b61036b5780826104fb565b60405163e2517d3f60e01b815233600482015260248101849052604490fd5b503461036b57602036600319011261036b5760206105636004356130f2565b604051908152f35b503461036b57602036600319011261036b57610585613197565b8073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__803b156103795781606491604051928380926306e5b7e760e21b82528460048301526004356024830152600160448301525af4801561036e5761035b5750f35b503461036b57602036600319011261036b57806105f6612caf565b6105fe6132ab565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e576040516342320d6160e11b8152600481018490526001600160a01b039091166024820152908290829060449082905af4801561036e5761035b5750f35b503461036b57602036600319011261036b576106726132ab565b8073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__803b15610379578160449160405192838092631a5db58960e21b825284600483015260043560248301525af4801561036e5761035b5750f35b503461036b576106e46106d336612cef565b916106df303314612fac565b613328565b80f35b503461036b57604036600319011261036b57610701612caf565b61071261070c612cc5565b91612f73565b9060018060a01b03166000526020526020604060002054604051908152f35b503461036b576020908160031936011261036b5761074d612caf565b604051634b2ec7c960e01b8152600481018390526001600160a01b039091166024820152828160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d557916107a3575b50604051908152f35b90508181813d83116107ce575b6107ba8183612d9f565b810103126107c957513861079a565b600080fd5b503d6107b0565b604051903d90823e3d90fd5b503461036b57604036600319011261036b5761082c600435610801612cc5565b90808452600080516020613ceb83398151915260205261082760016040862001546132f5565b6136df565b5080f35b503461036b578060031936011261036b5760018060a01b0380915416906001549060025490600554600654600754600854600954600a5491600b549387600c54169560ff89600d5416988a600e54169a600f54169b6010549d6011549f60405160805260805152602060805101526040608051015281811615156060608051015260081c16151560808051015260a0608051015260c0608051015260e06080510152610100608051015261012060805101526101406080510152610160608051015261018060805101526101a060805101526101c060805101526101e060805101526102006080510152610220608051f35b503461036b576020908160031936011261036b5761093e612caf565b6040516333fefd2b60e21b8152600481018390526001600160a01b039091166024820152828160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d557916107a35750604051908152f35b503461036b576020908160031936011261036b576040516313567f2960e01b81526004808201839052356024820152828160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d557916107a35750604051908152f35b612d24565b503461036b57602036600319011261036b57610a12613197565b8073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__803b156103795781606491604051928380926306e5b7e760e21b825284600483015260043560248301528460448301525af4801561036e5761035b5750f35b503461036b57602036600319011261036b5780610a82612caf565b610a8a61313b565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e578290606460405180948193634dcf1cf760e11b835285600484015260018060a01b031660248301528460448301525af4801561036e5761035b5750f35b503461036b57610af336612e22565b610afe93929361388b565b506040519163b3fc5db960e01b83526000600484015284602484015260006044840152602094858460648173__$1814f5c45fb4ddda68bfc681da060a464a$__5af4938415610be55790869392918695610bb1575b50604051610b8391610b6482612d84565b87825260405163ed607eef60e01b8152968795869533600488016130a3565b038173__$4f0348743f984310a2d0be11a6745499c5$__5af49182156107d557916107a35750604051908152f35b8481959296503d8311610bde575b610bc98183612d9f565b810103126107c957610b838693519490610b53565b503d610bbf565b6040513d87823e3d90fd5b503461036b57602036600319011261036b57610c0a612caf565b610c1261385b565b3360009081527fa3f49cd9abc069fadad1b5960d4e73636b82c5d06bb74023c9881d605e88b70260205260409020547fb88f06de7a467621d4739d66b596fe556082f25ab13291a5e3412ebfe6a282c79060ff1615610cf7575060408051630ab19c7560e01b8152600481018490526001600160a01b0390921660248301528160448173__$792584d84f72d9431342ae3d286007221a$__5af4801561036e57610ccc57506001600080516020613d2b8339815191525580f35b604090813d8311610cf0575b610ce28183612d9f565b8101031261036b57386104fb565b503d610cd8565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b503461036b57610d2436612e22565b610d309392919361388b565b50604051633413a49160e11b815260006004820152602481018390526001604482015260209490858160648173__$1814f5c45fb4ddda68bfc681da060a464a$__5af4908115610be55790869392918691610d965750604051610b8391610b6482612d84565b84819592503d8311610dc1575b610dad8183612d9f565b810103126107c957610b8386935190610b53565b503d610da3565b503461036b57602036600319011261036b57602061056360043561302b565b503461036b57604036600319011261036b57610e0e610e04612caf565b60243590336133fe565b602060405160018152f35b503461036b578060031936011261036b57602090604051908152f35b503461036b57604036600319011261036b57610e4f612caf565b90602435610e5e303314612fac565b6001600160a01b038316908115610f2c5781600052600080516020613c8b8339815191528060205260406000205494828610610efb5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926000959660209386885284520360408620557f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02818154039055604051908152a380f35b60405163391434e360e21b81526001600160a01b039190911660048201526024810186905260448101839052606490fd5b604051634b637e8f60e11b815260048101849052602490fd5b503461036b57602036600319011261036b5780610f60612d47565b610f6861324f565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e578290604460405180948193639425dfc760e01b8352856004840152151560248301525af4801561036e5761035b5750f35b503461036b578060031936011261036b576020600254604051908152f35b503461036b578060031936011261036b57604051631f387e1d60e21b8152600481018290529060208260248173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49081156107d5579061102f575b602090604051908152f35b506020813d60201161105a575b8161104960209383612d9f565b810103126107c95760209051611024565b3d915061103c565b503461036b578060031936011261036b576040519080600080516020613cab833981519152805461109281612e7a565b8086529260209260019280841690811561111457506001146110cf575b6110cb876110bf81890382612d9f565b60405191829182612c66565b0390f35b81529350600080516020613d0b8339815191525b838510611101575050505081016020016110bf826110cb38806110af565b80548686018401529382019381016110e3565b9150508695506110cb969350602092506110bf94915060ff191682840152151560051b820101929338806110af565b503461036b57604036600319011261036b57600435611160612cc5565b61116861385b565b61117061388b565b5061117a81613762565b8083116111b357506111998261119160209461302b565b809333613af0565b6001600080516020613d2b83398151915255604051908152f35b60405163284ff66760e01b81526001600160a01b0392909216600483015260248201929092526044810191909152606490fd5b503461036b57604036600319011261036b576040611202612cc5565b916004358152600080516020613ceb833981519152602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b503461036b578060031936011261036b57602061056361125d612ec1565b6112656139cf565b90612e57565b503461036b57602036600319011261036b573360009081527ffaadd6a40a37543b0ddfe1e3f3f266e11072592917e21d6a890803d0d7d6f75b60205260409020547f56df694eb35c748e42e9628d52ed28575d4046c5cb4ba53578a35cacecaaf9f99060ff1615610cf757508073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__803b156103795781604491604051928380926307d4432d60e51b825284600483015260043560248301525af4801561036e5761035b5750f35b503461036b5760a036600319011261036b576001600160a01b0390600435808316900361036b576024356001600160401b0381116119475761136c903690600401612ddb565b6044356001600160401b038111611bff5761138b903690600401612ddb565b928060843516608435036107c957600080516020613d4b83398151915254916001600160401b03831680159081611bef575b6001149081611be5575b159081611bdc575b50611bca5760016001600160401b0319841617600080516020613d4b8339815191525560ff8360401c1615611b9d575b611407613b67565b61140f613b67565b8051906001600160401b038211611b8957819061143a600080516020613c6b83398151915254612e7a565b601f8111611b0a575b50602090601f8311600114611a7f578692611a74575b50508160011b916000199060031b1c191617600080516020613c6b833981519152555b83516001600160401b038111611a60576114a4600080516020613cab83398151915254612e7a565b601f81116119e8575b50602094601f821160011461195e579484958293949592611953575b50508160011b916000199060031b1c191617600080516020613cab833981519152555b6114f4613b67565b6114fc613b67565b611507600435613b96565b901561194b575b7f0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e0091825490600435169160ff60a01b9060a01b16906affffffffffffffffffffff60a81b161717905561155f613b67565b611567613b67565b6001600080516020613d2b83398151915255611581613b67565b8173__$54d6f0ceb598a52c8007b3cf331120a868$__803b15611947578160449160405192838092632397c4e160e21b825284600483015260643560248301525af4801561036e57611933575b505060ff906115de6084356134ec565b506115ea60843561359c565b50600080516020613ccb83398151915280600052600080516020613ceb83398151915280602052816001604060002001918183549355817fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff938185600080a4817faa5d998d0c4b42510868f0d0e7c0a96373abb1abcf4dacce3cd68c32dfecf1e580600052600160406000200190828254925585600080a4817fbc6b16c313697c03242487da72beb3e512a6f0f23d77bbc347355f0e763f334d80600052600160406000200190828254925585600080a46116c3613940565b6116cb613940565b7fb88f06de7a467621d4739d66b596fe556082f25ab13291a5e3412ebfe6a282c79081600052602052600160406000200190828254925583600080a4817f4087820ac4f3f365dd6666f75a18a95ae63ded871b765505dc50ff63b8b8ad7a80600052600160406000200190828254925583600080a4817fb5635f8fcf25e4801550a062d4397a74f631be84ea8b1cff4a86e831f5c203dc80600052600160406000200190828254925583600080a4817f887f610dcfd5fcb5c1f7698dc3962d3f7c9e3ac366693c640c2cb4541798cce580600052600160406000200190828254925583600080a4817f0e5c3557c557b929246c71f8bdd2b8d41adac718fe1473b2c5260a78b189cd5180600052600160406000200190828254925583600080a4817f56df694eb35c748e42e9628d52ed28575d4046c5cb4ba53578a35cacecaaf9f980600052600160406000200190828254925583600080a4817f8ec1c37cf64b8ee6251b9f56a2381f08fce59092560623126b6f8aa4843227fb80600052600160406000200190828254925583600080a4817fd8ff363222baefa421b7eedd5f7f531b7be1f7001edc7ee4ad694cde369f31ee80600052600160406000200190828254925583600080a47fd40d5b35459acbc45a4f502ed75abb26933ccc9216a51d40c846481a5274c68a806000526001604060002001918383549355600080a460401c16156118d95780f35b68ff000000000000000019600080516020613d4b8339815191525416600080516020613d4b833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b61193c90612d56565b6119475781386115ce565b5080fd5b50601261150e565b0151905038806114c9565b600080516020613cab8339815191528552601f19821695600080516020613d0b83398151915291865b8881106119d0575083600195969798106119b7575b505050811b01600080516020613cab833981519152556114ec565b015160001960f88460031b161c1916905538808061199c565b91926020600181928685015181550194019201611987565b600080516020613cab8339815191528552601f820160051c600080516020613d0b833981519152019060208310611a4a575b601f0160051c600080516020613d0b83398151915201905b818110611a3f57506114ad565b858155600101611a32565b600080516020613d0b8339815191529150611a1a565b634e487b7160e01b84526041600452602484fd5b015190503880611459565b600080516020613c6b8339815191528752600080516020613c4b8339815191529250601f198416875b818110611af25750908460019594939210611ad9575b505050811b01600080516020613c6b8339815191525561147c565b015160001960f88460031b161c19169055388080611abe565b92936020600181928786015181550195019301611aa8565b909150600080516020613c6b8339815191528652601f830160051c600080516020613c4b8339815191520160208410611b74575b908392915b601f820160051c600080516020613c4b833981519152018110611b665750611443565b878155849350600101611b43565b50600080516020613c4b833981519152611b3e565b634e487b7160e01b85526041600452602485fd5b68ffffffffffffffffff1983166801000000000000000117600080516020613d4b833981519152556113ff565b60405163f92ee8a960e01b8152600490fd5b905015386113cf565b303b1591506113c7565b604085901c60ff161591506113bd565b8280fd5b503461036b57602036600319011261036b576020906040906001600160a01b03611c2b612caf565b168152600080516020613c8b83398151915283522054604051908152f35b503461036b57604036600319011261036b57600435611c66612cc5565b611c6e61385b565b611c7661388b565b50611c8081613762565b808311611ca05760208361119984611c97836130f2565b92839133613af0565b604051633c8097d960e11b81526001600160a01b0392909216600483015260248201929092526044810191909152606490fd5b503461036b57604036600319011261036b57611ced612caf565b906024358015158091036107c957611d0361385b565b3360009081527f0517aee78b9180436652dcfb6f20d72f8a241b9231fc7941f9cee74f4b6480d360205260409020547faa5d998d0c4b42510868f0d0e7c0a96373abb1abcf4dacce3cd68c32dfecf1e5939060ff1615611deb5782935073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__91823b15611de65760405163ce4c748160e01b8152600481018590526001600160a01b0390921660248301526044820152908290829060649082905af4801561036e57611dd257506001600080516020613d2b8339815191525580f35b611ddb90612d56565b61036b5780386104fb565b505050fd5b60405163e2517d3f60e01b815233600482015260248101859052604490fd5b503461036b57606036600319011261036b57611e24612caf565b90604435906001600160401b038083116119475736602384011215611947578260040135908111611f1a578060051b9360209460405192611e6787830185612d9f565b835260248684019186010194368611611f16579060248794939201905b868210611eff575050611ed1939450604051938492839263233d87e760e01b845287600485015260018060a01b031660248401526024356044840152608060648401526084830190612fee565b038173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d557916107a35750604051908152f35b848091611f0b84612cdb565b815201910190611e84565b8480fd5b634e487b7160e01b600052604160045260246000fd5b503461036b57602036600319011261036b5780611f4b612d47565b611f536131f3565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e57829060446040518094819363de9f508b60e01b8352856004840152151560248301525af4801561036e5761035b5750f35b503461036b57602090602060031936011261036b57600435916001600160401b03808411611bff5736602385011215611bff578360040135908111611bff573660248260051b86010111611bff57611ff761385b565b611fff61324f565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b156120a657919360405192637d35a6e560e11b845280604485018660048701526040602487015252602460648501920195855b82811061207d578680878181808903818b5af4801561036e5761051157506001600080516020613d2b8339815191525580f35b9091928280600192838060a01b036120948c612cdb565b1681520198019101969291909661204a565b8380fd5b503461036b576020908160031936011261036b57604051630c2424d960e31b81526004808201839052356024820152828160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d557916107a35750604051908152f35b503461036b57602036600319011261036b57612124612caf565b3360009081527f4166860bad6fb293cdffa9a9ce4c05d6e5359c7e9205745eae341f3036af237a60205260409020547f0e5c3557c557b929246c71f8bdd2b8d41adac718fe1473b2c5260a78b189cd5192919060ff161561052557819073__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e57604051632248a0d360e21b8152600481018490526001600160a01b039091166024820152908290829060449082905af4801561036e5761035b5750f35b503461036b57602036600319011261036b57806121f6612caf565b6121fe61324f565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e5760405163d55d582b60e01b8152600481018490526001600160a01b039091166024820152908290829060449082905af4801561036e5761035b5750f35b503461036b57606036600319011261036b57612272612caf565b61227a61385b565b6122826131f3565b60405190638dd618f560e01b825282600483015260018060a01b031660248201526024356044820152604435606482015260208160848173__$792584d84f72d9431342ae3d286007221a$__5af4801561036e576122f057506001600080516020613d2b8339815191525580f35b602090813d8311612314575b6123068183612d9f565b810103126107c957386104fb565b503d6122fc565b503461036b57604036600319011261036b57612335612caf565b60243590612344303314612fac565b6001600160a01b03169081156123d0577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000927f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace026123a6828254612e57565b9055848452600080516020613c8b833981519152825260408420818154019055604051908152a380f35b60405163ec442f0560e01b815260048101849052602490fd5b503461036b57604036600319011261036b57612403612caf565b9061240c61385b565b3360009081527ff495fdbfca8d2976096e9633d5792e8da7dcb1810952a4535dbeac0d0254195860205260409020547fd8ff363222baefa421b7eedd5f7f531b7be1f7001edc7ee4ad694cde369f31ee929060ff161561052557819073__$792584d84f72d9431342ae3d286007221a$__90813b1561041e578290606460405180948193632dd9caaf60e11b835285600484015260018060a01b0316602483015260243560448301525af4801561036e5761051157506001600080516020613d2b8339815191525580f35b503461036b57602036600319011261036b5760406080916124f6612caf565b816060845161250481612d69565b8281528260208201528286820152015260018060a01b0316815260036020522060405161253081612d69565b815491828252600181015460208301908152606060036002840154936040860194855201549301928352604051938452516020840152516040830152516060820152f35b503461036b578060031936011261036b577f0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e00546040516001600160a01b039091168152602090f35b503461036b57604036600319011261036b576125d6612cc5565b336001600160a01b038216036125f25761082c906004356136df565b60405163334bd91960e11b8152600490fd5b503461036b578060031936011261036b5760ff7f0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e005460a01c169060ff821161265157602082604051908152f35b634e487b7160e01b81526011600452602490fd5b503461036b57604036600319011261036b5761082c600435612685612cc5565b90808452600080516020613ceb8339815191526020526126ab60016040862001546132f5565b613658565b503461036b57602036600319011261036b57806126cb612caf565b6126d3613197565b73__$3ddc574512022f331a6a4c7e4bbb5c67b6$__90813b1561041e578290606460405180948193635a5994d360e11b835285600484015260018060a01b031660248301528460448301525af4801561036e5761035b5750f35b503461036b578060031936011261036b5760405180916004549081835260208093018092600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90835b8181106127d6575050508461278f910385612d9f565b60405193838594850191818652518092526040850193925b8281106127b657505050500390f35b83516001600160a01b0316855286955093810193928101926001016127a7565b82546001600160a01b031684529286019260019283019201612779565b503461036b57602036600319011261036b57600160406020926004358152600080516020613ceb8339815191528452200154604051908152f35b503461036b57610e0e61283f36612cef565b9161284b833383613328565b6133fe565b503461036b578060031936011261036b576020610563612ec1565b503461036b57602036600319011261036b57612885612caf565b61288d61313b565b8173__$3ddc574512022f331a6a4c7e4bbb5c67b6$__91823b1561194757604051634dcf1cf760e11b8152600481018390526001600160a01b0390911660248201526001604482015291829060649082905af4801561036e576128ee575080f35b6106e490612d56565b503461036b578060031936011261036b576040516310e005b160e01b81526004810182905260208160248173__$1814f5c45fb4ddda68bfc681da060a464a$__5af490811561036e578291612952575b602082604051908152f35b90506020813d602011612980575b8161296d60209383612d9f565b8101031261194757602091505138612947565b3d9150612960565b503461036b576020908160031936011261036b576040516361af063360e11b81526004808201839052356024820152828160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d55780926129eb575b5050604051908152f35b9091508282813d8311612a14575b612a038183612d9f565b8101031261036b57505138806129e1565b503d6129f9565b503461036b57604036600319011261036b57612a35612caf565b602435903315612ab3576001600160a01b0316918215612a9b5760408291612a5c33612f73565b85825260205220556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60249060405190634a1406b160e11b82526004820152fd5b60405163e602df0560e01b815260048101849052602490fd5b503461036b578060031936011261036b576020600654604051908152f35b503461036b576020908160031936011261036b576040516310968a0560e01b81526004808201839052356024820152828160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af49182156107d55780926129eb575050604051908152f35b503461036b578060031936011261036b576040519080600080516020613c6b8339815191528054612b7c81612e7a565b808652926020926001928084169081156111145750600114612ba8576110cb876110bf81890382612d9f565b81529350600080516020613c4b8339815191525b838510612bda575050505081016020016110bf826110cb38806110af565b8054868601840152938201938101612bbc565b503461036b57602036600319011261036b5760043563ffffffff60e01b811680910361194757602090637965db0b60e01b8114908115612c33575b506040519015158152f35b6301ffc9a760e01b14905082612c28565b503461036b578060031936011261036b57602061056360025460015490612e57565b6020808252825181830181905290939260005b828110612c9b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501612c79565b600435906001600160a01b03821682036107c957565b602435906001600160a01b03821682036107c957565b35906001600160a01b03821682036107c957565b60609060031901126107c9576001600160a01b039060043582811681036107c9579160243590811681036107c9579060443590565b346107c95760203660031901126107c9576020610563612d42612caf565b613762565b6004359081151582036107c957565b6001600160401b038111611f1a57604052565b608081019081106001600160401b03821117611f1a57604052565b602081019081106001600160401b03821117611f1a57604052565b90601f801991011681019081106001600160401b03821117611f1a57604052565b6001600160401b038111611f1a57601f01601f191660200190565b81601f820112156107c957803590612df282612dc0565b92612e006040519485612d9f565b828452602083830101116107c957816000926020809301838601378301015290565b60609060031901126107c957600435906001600160a01b039060243582811681036107c9579160443590811681036107c95790565b91908201809211612e6457565b634e487b7160e01b600052601160045260246000fd5b90600182811c92168015612eaa575b6020831014612e9457565b634e487b7160e01b600052602260045260246000fd5b91607f1691612e89565b91908203918211612e6457565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254604051639a17075960e01b8152600060048201529060208260248173__$d8260e8b02a4a6ab3ae2f76431c00289f4$__5af4908115612f6757600091612f31575b612f2e9250612eb4565b90565b90506020823d602011612f5f575b81612f4c60209383612d9f565b810103126107c957612f2e915190612f24565b3d9150612f3f565b6040513d6000823e3d90fd5b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b15612fb357565b60405162461bcd60e51b815260206004820152601360248201527213db9b1e481d985d5b1d0818d85b881b5a5b9d606a1b6044820152606490fd5b90815180825260208080930193019160005b82811061300e575050505090565b83516001600160a01b031685529381019392810192600101613000565b60405190630d25bbb560e01b825260006004830152602482015260208160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af4908115612f6757600091613074575090565b90506020813d60201161309b575b8161308f60209383612d9f565b810103126107c9575190565b3d9150613082565b60008082526001600160a01b039283166020830152928216604082015292166060830152608082019290925260a081019290925260c082015261010060e08201819052612f2e92910190612fee565b6040519063665c96db60e11b825260006004830152602482015260208160448173__$1814f5c45fb4ddda68bfc681da060a464a$__5af4908115612f6757600091613074575090565b3360009081527f10d70e3a3777c025b5e9ce76933ad9e855317d269f27e1a4bc94e9698e3f665860205260409020547fbc6b16c313697c03242487da72beb3e512a6f0f23d77bbc347355f0e763f334d9060ff1615610cf75750565b3360009081527f6c0c2d1d14bc83a2216e58daf9a0cd7e298111de4a5b7b16aa980076b0f85ff960205260409020547f887f610dcfd5fcb5c1f7698dc3962d3f7c9e3ac366693c640c2cb4541798cce59060ff1615610cf75750565b3360009081527fadcc9e5138e1babd8d9829f890e27ec44d4e252c58e34ce3fa129c741d13373460205260409020547f4087820ac4f3f365dd6666f75a18a95ae63ded871b765505dc50ff63b8b8ad7a9060ff1615610cf75750565b3360009081527f9a4cd071f2ff548e185a4af9a22df0932b4f41be60048045cf84c207ed3d583860205260409020547f6ba016d3b65b86283908b0fb3b490838033bbcf01b3aebc405616e0c981d00739060ff1615610cf75750565b3360009081527f4a9c097c866513af3cc7dc827c0f6d0047b0afe5503d41e27ed9ad22b37874cd6020526040902054600080516020613ccb8339815191529060ff1615610cf75750565b80600052600080516020613ceb83398151915260205260406000203360005260205260ff6040600020541615610cf75750565b919061333383612f73565b9260018060a01b0390818316916000958387526020526040862054936000198510613362575b50505050505050565b8585106133cd57508116156133b457811561339b57906133856040949392612f73565b9085526020520391205538808080808080613359565b604051634a1406b160e11b815260048101869052602490fd5b60405163e602df0560e01b815260048101869052602490fd5b604051637dc7a0d960e11b81526001600160a01b039190911660048201526024810185905260448101869052606490fd5b916001600160a01b038084169283156134d357169283156134ba57600090838252600080516020613c8b83398151915280602052604083205491848310613487575082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef959360409388602097528652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b0391909116600482015260248101929092525060448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6001600160a01b031660008181527f4a9c097c866513af3cc7dc827c0f6d0047b0afe5503d41e27ed9ad22b37874cd6020526040812054909190600080516020613ccb83398151915290600080516020613ceb8339815191529060ff16613596578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b6001600160a01b031660008181527f0517aee78b9180436652dcfb6f20d72f8a241b9231fc7941f9cee74f4b6480d360205260408120549091907faa5d998d0c4b42510868f0d0e7c0a96373abb1abcf4dacce3cd68c32dfecf1e590600080516020613ceb8339815191529060ff16613596578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90600091808352600080516020613ceb83398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014613596578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90600091808352600080516020613ceb83398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461359657818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160a01b0390811680158015613852575b61384b5781600d5416908161381a5750506007546000198114613815576004906020600093845416604051938480926278744560e21b82525afa91821561380a5783926137d6575b50808210156137d157612f2e9250612eb4565b505090565b9091506020813d602011613802575b816137f260209383612d9f565b81010312611bff575190386137be565b3d91506137e5565b6040513d85823e3d90fd5b905090565b6020919250602460405180948193632355178960e11b835260048301525afa908115612f6757600091613074575090565b5050600090565b50308114613776565b600080516020613d2b83398151915260028154146138795760029055565b604051633ee5aeb560e01b8152600490fd5b6138936139cf565b600f549091906001600160a01b0390811680151580613937575b6138e7575b5042601155600f54167f9b667543ac195d809e34c85813d76b4738f9e454b9334d6db8d7f035702e47a26020604051858152a2565b6000908282541690813b15611bff5782916044839260405195869384926340c10f1960e01b845260048401528a60248401525af19081156107d55750156138b25761393190612d56565b386138b2565b508315156138ad565b7f6ba016d3b65b86283908b0fb3b490838033bbcf01b3aebc405616e0c981d007380600052600080516020613ceb833981519152602052600160406000200190815490600080516020613ccb8339815191528093557fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff600080a4565b81810292918115918404141715612e6457565b600f546001600160a01b0390811615613aea57600080546040516318160ddd60e01b81529260209291168284600481845afa93841561036e578294613abb575b509082602492604051938480926370a0823160e01b82528060048301525afa928315613aae578193613a74575b505050613a67613a55613a709264496cebb80094612eb4565b613a6160115442612eb4565b906139bc565b601054906139bc565b0490565b9091809350813d8311613aa7575b613a8c8183612d9f565b8101031261036b575051613a67613a5564496cebb800613a3c565b503d613a82565b50604051903d90823e3d90fd5b9093508281813d8311613ae3575b613ad38183612d9f565b8101031261194757519282613a0f565b503d613ac9565b50600090565b90919273__$209f7610f7b09602dd9c7c2ef5b135794a$__92833b156107c95760009360a492604051968795869463084a7e7960e31b865288600487015260018060a01b038092166024870152166044850152606484015260848301525af48015612f6757613b5c5750565b613b6590612d56565b565b60ff600080516020613d4b8339815191525460401c1615613b8457565b604051631afcd79f60e31b8152600490fd5b90604051602081019063313ce56760e01b825260048152604081018181106001600160401b03821117611f1a576040525160009384928392916001600160a01b03165afa3d15613c42573d90613beb82612dc0565b91613bf96040519384612d9f565b82523d84602084013e5b80613c36575b613c13575b508190565b602081805181010312611bff576020015160ff8111613c0e576001925060ff1690565b50602081511015613c09565b606090613c0356fe2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace049bd4dbbde3e8c2a4c422fc593b5df31e3960da9ec402b66c87a010d0623ab46c02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680046a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a2646970667358221220244d9740100ce671cedabd1a6220df120160ed46109dba33e38b0f15f4e68c4564736f6c63430008180033",
  "libraries": {
    "ERC20Logic": "0x5628db49dEEbdb1bCE3402F567ea5D2c40C83415",
    "ERC4626Logic": "0x9EE10f63449f2DD3CeE511CcCf67C881F73D3fb6",
    "InitializeLogic": "0x5e84c9B1303d2AD196cc0ce29002dd3524F5AFF4",
    "DepositLogic": "0xc909a83daAD0bd4cB47AB718f494A86F3d2c66B4",
    "WithdrawLogic": "0xCd251d1Cb60D5b1Fdc315b3282b66C3A8CdaAaFC",
    "UnlockSharesLogic": "0x185807a05a5A0eF5c31516cdA68422B98f6147E8",
    "DebtLogic": "0x65aFcbBB35cb76E21095873783272793d5Fd00B7",
    "ConfiguratorLogic": "0xa9DDb04e1d0B7a603cB7394C186d1529dc877FF4"
  },
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
        {
          "details": "Attempted to deposit more assets than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxMint(address,uint256,uint256)": [
        {
          "details": "Attempted to mint more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
        {
          "details": "Attempted to redeem more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
        {
          "details": "Attempted to withdraw more assets than the max amount for `receiver`."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8214,
        "contract": "contracts/protocol/Vault.sol:Vault",
        "label": "vaultData",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(VaultData)12647_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(StrategyData)12604_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.StrategyData)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyData)12604_storage"
      },
      "t_struct(StrategyData)12604_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.StrategyData",
        "members": [
          {
            "astId": 12597,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "activation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12599,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "lastReport",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12601,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "currentDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12603,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VaultData)12647_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.VaultData",
        "members": [
          {
            "astId": 12606,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "addressVault",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12608,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "totalDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12610,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "totalIdle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12615,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "strategies",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(StrategyData)12604_storage)"
          },
          {
            "astId": 12618,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "defaultQueue",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12620,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "useDefaultQueue",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 12622,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "autoAllocate",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 12624,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "minimumTotalIdle",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12626,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "depositLimit",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12628,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "profitMaxUnlockTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12630,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "fullProfitUnlockDate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12632,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "profitUnlockingRate",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 12634,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "lastProfitUpdate",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 12636,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "accountant",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 12638,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "depositLimitModule",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 12640,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "withdrawLimitModule",
            "offset": 0,
            "slot": "14",
            "type": "t_address"
          },
          {
            "astId": 12642,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "15",
            "type": "t_address"
          },
          {
            "astId": 12644,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "managementFee",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 12646,
            "contract": "contracts/protocol/Vault.sol:Vault",
            "label": "lastTimeTakeManagementFee",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}